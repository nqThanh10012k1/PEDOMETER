/*
 * main.c
 *
 *  Created on: Jul 23, 2022
 *      Author: Thanh Nguyen
 */

#include <stm32f10x_rcc.h>
#include <stm32f10x_gpio.h>
#include <stm32f10x_i2c.h>
#include <stm32f10x_usart.h>
#include <stm32f10x_spi.h>
#include <stm32f10x_exti.h>
#include <misc.h>
#include <stdint.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>

#define USART1_GPIO_PORT					GPIOA
#define USART1_TX_GPIO_PIN					GPIO_Pin_9
#define USART1_RX_GPIO_PIN					GPIO_Pin_10

#define USART_BAUDRATE						9600

#define SPI2_GPIO_PORT						GPIOB
#define SPI2_SCK_PIN						GPIO_Pin_13
#define SPI2_MOSI_PIN						GPIO_Pin_15
#define SPI2_NSS_PIN						GPIO_Pin_12

#define I2C2_GPIO_PORT						GPIOB
#define I2C2_GPIO_SCL_PIN					GPIO_Pin_10
#define I2C2_GPIO_SDA_PIN					GPIO_Pin_11

#define TRANSMITTER							0
#define RECEIVER							1

#define MPU6050_ADDRESS                 0x68

#define SMPRT_DIV_REGEGISTER            0x19
#define CONFIG_REGISTER                 0x1A
#define GYRO_CONFIG_REGISTER            0x1B
#define ACCEL_CONFIG_REGISTER           0x1C
#define INT_ENABLE_REGISTER             0x38
#define PWR_MGMT_1_REGISTER             0x6B
#define ACCEL_XOUT_REGISTER             0x3B
#define ACCEL_YOUT_REGISTER             0x3D
#define ACCEL_ZOUT_REGISTER             0x3F
#define GYRO_XOUT_REGISTER              0x43
#define GYRO_YOUT_REGISTER              0x45
#define GYRO_ZOUT_REGISTER              0x47
#define INT_ENABLE_REGISTER             0x38
#define INT_STATUS_REGISTER             0x3A

uint32_t msTick = 0;

typedef struct
{
	float x;
	float y;
	float z;
} acc_value_t;

acc_value_t acc_value;

float acc_total = 0;

void SysTick_Init();
uint32_t SysTick_getTick();
void Delay_ms(uint32_t ms);
void SPI1_MasterInit();
void SPIx_Send_Data(SPI_TypeDef * SPIx, uint16_t data);
void MAX7219_Init();
void MAX7219_Display(uint16_t number);
void I2C2_Init();
void I2Cx_SendData(I2C_TypeDef * I2Cx, uint8_t SlaveAddress, uint8_t RegisterAddress, uint8_t data);
uint8_t I2Cx_ReceiveData(I2C_TypeDef * I2Cx, uint8_t SlaveAddress, uint8_t RegisterAddress);
void MPU6050_Init();
void MPU6050_InteruptPinInit();
acc_value_t MPU6050_ReadAcc(double accIntensity);
void ProcessPedometer();

int main()
{
	SystemCoreClockUpdate();
	SysTick_Init();
	SPI1_MasterInit();
	MAX7219_Init();
	I2C2_Init();
	MPU6050_Init();
	INT_Init();
	MAX7219_Display(0);

	uint8_t step_flag = 0;
	uint16_t step_count = 0;

	while (1)
	{
		if (step_flag == 0)
		{
			if (acc_total < 0.96)
			{
				step_flag = 1;
				step_count++;
				MAX7219_Display(step_count);
				Delay_ms(250);
			}
		}
		if (step_flag == 1)
		{
			if (acc_total > 1)
			{
				step_flag = 0;
				Delay_ms(250);
			}
		}
	}
}

void SysTick_Init()
{
	SysTick_Config(SystemCoreClock / 1000);
}

void SysTick_Handler()
{
	msTick++;
}

uint32_t SysTick_getTick()
{
	return msTick;
}

void Delay_ms(uint32_t ms)
{
	uint32_t to, t1, t = 0;

	to = SysTick_getTick();

	do
	{
		t1 = SysTick_getTick();

		if (t1 >= to)
		{
			t += (t1 - to);
		}
		else
		{
			t += (0xFFFFFFFFu + t1 - to);
		}

		to = t1;
	} while (t < ms);
}

void SPI1_MasterInit()
{
	GPIO_InitTypeDef GPIO_Init_Structure;
	SPI_InitTypeDef SPI_Init_Structure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
	GPIO_Init_Structure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init_Structure.GPIO_Pin = SPI2_SCK_PIN | SPI2_MOSI_PIN;
	GPIO_Init_Structure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(SPI2_GPIO_PORT, &GPIO_Init_Structure);

	GPIO_Init_Structure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init_Structure.GPIO_Pin = SPI2_NSS_PIN;
	GPIO_Init_Structure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_Init_Structure);

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
	SPI_Init_Structure.SPI_Mode = SPI_Mode_Master;
	SPI_Init_Structure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_Init_Structure.SPI_CPOL = SPI_CPOL_Low;
	SPI_Init_Structure.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_Init_Structure.SPI_DataSize = SPI_DataSize_16b;
	SPI_Init_Structure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32;
	SPI_Init_Structure.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_Init_Structure.SPI_NSS = SPI_NSS_Soft;
	SPI_Init(SPI2, &SPI_Init_Structure);
	SPI_Cmd(SPI2, ENABLE);
}

void SPIx_Send_Data(SPI_TypeDef * SPIx, uint16_t data)
{
	GPIO_ResetBits(SPI2_GPIO_PORT, SPI2_NSS_PIN);
	SPI_I2S_SendData(SPIx, data);
	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == 1);
	GPIO_SetBits(SPI2_GPIO_PORT, SPI2_NSS_PIN);
}

void MAX7219_Init()
{
	// Decode mode
	SPIx_Send_Data(SPI2, (0x09 << 8) | 0xFF);
	// Intensity
	SPIx_Send_Data(SPI2, (0x0A << 8) | 0x09);
	// Scan limit
	SPIx_Send_Data(SPI2, (0x0B << 8) | 0x07);
	// Shutdown mode
	SPIx_Send_Data(SPI2, (0x0C << 8) | 0x01);
	// Display test
	SPIx_Send_Data(SPI2, (0x0F << 8) | 0x00);
}

void MAX7219_Display(uint16_t number)
{
	uint8_t count = 0;

	do
	{
		count++;
		SPIx_Send_Data(SPI2, (count << 8) | (uint8_t)(number % 10));
		number /= 10;
	} while (number > 0);

	// scan limit
	SPIx_Send_Data(SPI2, (0x0B << 8) | (count - 1));
}

void I2C2_Init()
{
	GPIO_InitTypeDef	GPIO_InitStructure;
	I2C_InitTypeDef		I2C_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Pin = I2C2_GPIO_SCL_PIN | I2C2_GPIO_SDA_PIN;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_ClockSpeed = 400000;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Disable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
	I2C_Init(I2C2, &I2C_InitStructure);
	I2C_Cmd(I2C2, ENABLE);
}

void I2Cx_SendData(I2C_TypeDef * I2Cx, uint8_t SlaveAddress, uint8_t RegisterAddress, uint8_t data)
{
	// I2C start
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
	I2C_GenerateSTART(I2Cx, ENABLE);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
	// I2C address phase
	I2C_Send7bitAddress(I2Cx, SlaveAddress << 1, I2C_Direction_Transmitter);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
	I2C_SendData(I2Cx, RegisterAddress);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	I2C_SendData(I2Cx, data);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	I2C_GenerateSTOP(I2Cx, ENABLE);
}

uint8_t I2Cx_ReceiveData(I2C_TypeDef * I2Cx, uint8_t SlaveAddress, uint8_t RegisterAddress)
{
	uint8_t data = 0;

	// I2C start
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
	I2C_GenerateSTART(I2Cx, ENABLE);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
	// I2C address phase
	I2C_Send7bitAddress(I2Cx, SlaveAddress << 1, I2C_Direction_Transmitter);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
	// I2C send register address
	I2C_SendData(I2Cx, RegisterAddress);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	// I2C stop
	I2C_GenerateSTOP(I2Cx, ENABLE);

	// I2C repeat start
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
	I2C_GenerateSTART(I2Cx, ENABLE);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
	// I2C address phase
	I2C_Send7bitAddress(I2Cx, SlaveAddress << 1, I2C_Direction_Receiver);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	// I2C receive data
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));
	data = I2C_ReceiveData(I2Cx);
	// I2C stop
	I2C_GenerateSTOP(I2Cx, ENABLE);

	return data;
}

void MPU6050_Init()
{
	// sample rate 100 Hz
	I2Cx_SendData(I2C2, MPU6050_ADDRESS, SMPRT_DIV_REGEGISTER, 0x09);
	// DLPF
	I2Cx_SendData(I2C2, MPU6050_ADDRESS, CONFIG_REGISTER, 0x03);
	// gyro full scale 500 deg/s
	I2Cx_SendData(I2C2, MPU6050_ADDRESS, GYRO_CONFIG_REGISTER, 0x08);
	// acc full scale 8g
	I2Cx_SendData(I2C2, MPU6050_ADDRESS, ACCEL_CONFIG_REGISTER, 0x10);
	// power management
	I2Cx_SendData(I2C2, MPU6050_ADDRESS, PWR_MGMT_1_REGISTER, 0x00);
	// int enable
	I2Cx_SendData(I2C2, MPU6050_ADDRESS, INT_ENABLE_REGISTER, 0x01);
}

void MPU6050_InteruptPinInit()
{
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource1);
	EXTI_InitStructure.EXTI_Line = EXTI_Line1;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
	EXTI_Init(&EXTI_InitStructure);

	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init(&NVIC_InitStructure);
}

void EXTI1_IRQHandler()
{
	if (EXTI_GetFlagStatus(EXTI_Line1) == 1)
	{
		acc_value = MPU6050_ReadAcc(4096);
		acc_total = sqrt(pow(acc_value.x, 2) + pow(acc_value.y, 2) + pow(acc_value.z, 2));

		I2Cx_ReceiveData(I2C2, MPU6050_ADDRESS, INT_STATUS_REGISTER);
		EXTI_ClearITPendingBit(EXTI_Line1);
	}
}

acc_value_t MPU6050_ReadAcc(double accIntensity)
{
	uint8_t highReg, lowReg;
	int16_t data;
	acc_value_t acc;

	highReg = I2Cx_ReceiveData(I2C2, MPU6050_ADDRESS, ACCEL_XOUT_REGISTER);
	lowReg = I2Cx_ReceiveData(I2C2, MPU6050_ADDRESS, ACCEL_XOUT_REGISTER + 1);
	data = (highReg << 8) | lowReg;
	acc.x = (double)data / accIntensity;

	highReg = I2Cx_ReceiveData(I2C2, MPU6050_ADDRESS, ACCEL_YOUT_REGISTER);
	lowReg = I2Cx_ReceiveData(I2C2, MPU6050_ADDRESS, ACCEL_YOUT_REGISTER + 1);
	data = (highReg << 8) | lowReg;
	acc.y = (double)data / accIntensity;

	highReg = I2Cx_ReceiveData(I2C2, MPU6050_ADDRESS, ACCEL_ZOUT_REGISTER);
	lowReg = I2Cx_ReceiveData(I2C2, MPU6050_ADDRESS, ACCEL_ZOUT_REGISTER + 1);
	data = (highReg << 8) | lowReg;
	acc.z = (double)data / accIntensity;

	return acc;
}

void ProcessPedometer()
{

}



