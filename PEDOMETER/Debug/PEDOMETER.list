
PEDOMETER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f1c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003050  08003050  00013050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003080  08003080  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08003080  08003080  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003080  08003080  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000008c  08003114  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003114  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004530  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000101f  00000000  00000000  000245e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  00025608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000518  00000000  00000000  00025bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eff1  00000000  00000000  000260d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000059d1  00000000  00000000  000350c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005454a  00000000  00000000  0003aa92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008efdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c88  00000000  00000000  0008f02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000008c 	.word	0x2000008c
 800014c:	00000000 	.word	0x00000000
 8000150:	08003034 	.word	0x08003034

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000090 	.word	0x20000090
 800016c:	08003034 	.word	0x08003034

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2f>:
 8000a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a50:	bf24      	itt	cs
 8000a52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5a:	d90d      	bls.n	8000a78 <__aeabi_d2f+0x30>
 8000a5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a70:	bf08      	it	eq
 8000a72:	f020 0001 	biceq.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a7c:	d121      	bne.n	8000ac2 <__aeabi_d2f+0x7a>
 8000a7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a82:	bfbc      	itt	lt
 8000a84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	4770      	bxlt	lr
 8000a8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a92:	f1c2 0218 	rsb	r2, r2, #24
 8000a96:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa2:	bf18      	it	ne
 8000aa4:	f040 0001 	orrne.w	r0, r0, #1
 8000aa8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab4:	ea40 000c 	orr.w	r0, r0, ip
 8000ab8:	fa23 f302 	lsr.w	r3, r3, r2
 8000abc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac0:	e7cc      	b.n	8000a5c <__aeabi_d2f+0x14>
 8000ac2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac6:	d107      	bne.n	8000ad8 <__aeabi_d2f+0x90>
 8000ac8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000acc:	bf1e      	ittt	ne
 8000ace:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ad6:	4770      	bxne	lr
 8000ad8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__gesf2>:
 8000ae8:	f04f 3cff 	mov.w	ip, #4294967295
 8000aec:	e006      	b.n	8000afc <__cmpsf2+0x4>
 8000aee:	bf00      	nop

08000af0 <__lesf2>:
 8000af0:	f04f 0c01 	mov.w	ip, #1
 8000af4:	e002      	b.n	8000afc <__cmpsf2+0x4>
 8000af6:	bf00      	nop

08000af8 <__cmpsf2>:
 8000af8:	f04f 0c01 	mov.w	ip, #1
 8000afc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b0c:	bf18      	it	ne
 8000b0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b12:	d011      	beq.n	8000b38 <__cmpsf2+0x40>
 8000b14:	b001      	add	sp, #4
 8000b16:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b1a:	bf18      	it	ne
 8000b1c:	ea90 0f01 	teqne	r0, r1
 8000b20:	bf58      	it	pl
 8000b22:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b26:	bf88      	it	hi
 8000b28:	17c8      	asrhi	r0, r1, #31
 8000b2a:	bf38      	it	cc
 8000b2c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b30:	bf18      	it	ne
 8000b32:	f040 0001 	orrne.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b3c:	d102      	bne.n	8000b44 <__cmpsf2+0x4c>
 8000b3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b42:	d105      	bne.n	8000b50 <__cmpsf2+0x58>
 8000b44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b48:	d1e4      	bne.n	8000b14 <__cmpsf2+0x1c>
 8000b4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b4e:	d0e1      	beq.n	8000b14 <__cmpsf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cfrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4608      	mov	r0, r1
 8000b5c:	4661      	mov	r1, ip
 8000b5e:	e7ff      	b.n	8000b60 <__aeabi_cfcmpeq>

08000b60 <__aeabi_cfcmpeq>:
 8000b60:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b62:	f7ff ffc9 	bl	8000af8 <__cmpsf2>
 8000b66:	2800      	cmp	r0, #0
 8000b68:	bf48      	it	mi
 8000b6a:	f110 0f00 	cmnmi.w	r0, #0
 8000b6e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b70 <__aeabi_fcmpeq>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff fff4 	bl	8000b60 <__aeabi_cfcmpeq>
 8000b78:	bf0c      	ite	eq
 8000b7a:	2001      	moveq	r0, #1
 8000b7c:	2000      	movne	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_fcmplt>:
 8000b84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b88:	f7ff ffea 	bl	8000b60 <__aeabi_cfcmpeq>
 8000b8c:	bf34      	ite	cc
 8000b8e:	2001      	movcc	r0, #1
 8000b90:	2000      	movcs	r0, #0
 8000b92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b96:	bf00      	nop

08000b98 <__aeabi_fcmple>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff ffe0 	bl	8000b60 <__aeabi_cfcmpeq>
 8000ba0:	bf94      	ite	ls
 8000ba2:	2001      	movls	r0, #1
 8000ba4:	2000      	movhi	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_fcmpge>:
 8000bac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb0:	f7ff ffd2 	bl	8000b58 <__aeabi_cfrcmple>
 8000bb4:	bf94      	ite	ls
 8000bb6:	2001      	movls	r0, #1
 8000bb8:	2000      	movhi	r0, #0
 8000bba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_fcmpgt>:
 8000bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc4:	f7ff ffc8 	bl	8000b58 <__aeabi_cfrcmple>
 8000bc8:	bf34      	ite	cc
 8000bca:	2001      	movcc	r0, #1
 8000bcc:	2000      	movcs	r0, #0
 8000bce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd2:	bf00      	nop

08000bd4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b087      	sub	sp, #28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	230f      	movs	r3, #15
 8000be6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	78db      	ldrb	r3, [r3, #3]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d03a      	beq.n	8000c66 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000bf0:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <NVIC_Init+0xbc>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	0a1b      	lsrs	r3, r3, #8
 8000bf8:	f003 0307 	and.w	r3, r3, #7
 8000bfc:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	f1c3 0304 	rsb	r3, r3, #4
 8000c04:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0e:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	785b      	ldrb	r3, [r3, #1]
 8000c14:	461a      	mov	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	789b      	ldrb	r3, [r3, #2]
 8000c22:	461a      	mov	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4013      	ands	r3, r2
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000c34:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <NVIC_Init+0xc0>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	6979      	ldr	r1, [r7, #20]
 8000c3c:	b2c9      	uxtb	r1, r1
 8000c3e:	4413      	add	r3, r2
 8000c40:	460a      	mov	r2, r1
 8000c42:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c4e:	4911      	ldr	r1, [pc, #68]	; (8000c94 <NVIC_Init+0xc0>)
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	7812      	ldrb	r2, [r2, #0]
 8000c54:	0952      	lsrs	r2, r2, #5
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c60:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000c64:	e00f      	b.n	8000c86 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c6e:	4909      	ldr	r1, [pc, #36]	; (8000c94 <NVIC_Init+0xc0>)
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	7812      	ldrb	r2, [r2, #0]
 8000c74:	0952      	lsrs	r2, r2, #5
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c7e:	f100 0320 	add.w	r3, r0, #32
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c86:	bf00      	nop
 8000c88:	371c      	adds	r7, #28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00
 8000c94:	e000e100 	.word	0xe000e100

08000c98 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000ca4:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <EXTI_Init+0xe0>)
 8000ca6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	799b      	ldrb	r3, [r3, #6]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d04f      	beq.n	8000d50 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000cb0:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <EXTI_Init+0xe0>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	492f      	ldr	r1, [pc, #188]	; (8000d78 <EXTI_Init+0xe0>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <EXTI_Init+0xe0>)
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	492b      	ldr	r1, [pc, #172]	; (8000d78 <EXTI_Init+0xe0>)
 8000ccc:	4013      	ands	r3, r2
 8000cce:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	791b      	ldrb	r3, [r3, #4]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4413      	add	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6819      	ldr	r1, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000cea:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <EXTI_Init+0xe0>)
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4920      	ldr	r1, [pc, #128]	; (8000d78 <EXTI_Init+0xe0>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <EXTI_Init+0xe0>)
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	491c      	ldr	r1, [pc, #112]	; (8000d78 <EXTI_Init+0xe0>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	795b      	ldrb	r3, [r3, #5]
 8000d0e:	2b10      	cmp	r3, #16
 8000d10:	d10e      	bne.n	8000d30 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <EXTI_Init+0xe0>)
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4917      	ldr	r1, [pc, #92]	; (8000d78 <EXTI_Init+0xe0>)
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <EXTI_Init+0xe0>)
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4913      	ldr	r1, [pc, #76]	; (8000d78 <EXTI_Init+0xe0>)
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000d2e:	e01d      	b.n	8000d6c <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <EXTI_Init+0xe0>)
 8000d32:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	795b      	ldrb	r3, [r3, #5]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6819      	ldr	r1, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]
}
 8000d4e:	e00d      	b.n	8000d6c <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	791b      	ldrb	r3, [r3, #4]
 8000d54:	461a      	mov	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4413      	add	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6819      	ldr	r1, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	43da      	mvns	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	400a      	ands	r2, r1
 8000d6a:	601a      	str	r2, [r3, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40010400 	.word	0x40010400

08000d7c <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <EXTI_GetFlagStatus+0x30>)
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e001      	b.n	8000d9e <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40010400 	.word	0x40010400

08000db0 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000db8:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <EXTI_ClearITPendingBit+0x18>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6153      	str	r3, [r2, #20]
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	40010400 	.word	0x40010400

08000dcc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	78db      	ldrb	r3, [r3, #3]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	78db      	ldrb	r3, [r3, #3]
 8000dfc:	f003 0310 	and.w	r3, r3, #16
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d005      	beq.n	8000e10 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	789b      	ldrb	r3, [r3, #2]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d044      	beq.n	8000ea4 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	e038      	b.n	8000e98 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000e26:	2201      	movs	r2, #1
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d126      	bne.n	8000e92 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	78db      	ldrb	r3, [r3, #3]
 8000e70:	2b28      	cmp	r3, #40	; 0x28
 8000e72:	d105      	bne.n	8000e80 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000e74:	2201      	movs	r2, #1
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	e008      	b.n	8000e92 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	78db      	ldrb	r3, [r3, #3]
 8000e84:	2b48      	cmp	r3, #72	; 0x48
 8000e86:	d104      	bne.n	8000e92 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	409a      	lsls	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	3301      	adds	r3, #1
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	2b07      	cmp	r3, #7
 8000e9c:	d9c3      	bls.n	8000e26 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	2bff      	cmp	r3, #255	; 0xff
 8000eaa:	d946      	bls.n	8000f3a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
 8000eb6:	e03a      	b.n	8000f2e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	3308      	adds	r3, #8
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d127      	bne.n	8000f28 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000ede:	220f      	movs	r2, #15
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	78db      	ldrb	r3, [r3, #3]
 8000f04:	2b28      	cmp	r3, #40	; 0x28
 8000f06:	d105      	bne.n	8000f14 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	3308      	adds	r3, #8
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	78db      	ldrb	r3, [r3, #3]
 8000f18:	2b48      	cmp	r3, #72	; 0x48
 8000f1a:	d105      	bne.n	8000f28 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	3308      	adds	r3, #8
 8000f20:	2201      	movs	r2, #1
 8000f22:	409a      	lsls	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	2b07      	cmp	r3, #7
 8000f32:	d9c1      	bls.n	8000eb8 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	605a      	str	r2, [r3, #4]
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000f50:	887a      	ldrh	r2, [r7, #2]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000f6c:	887a      	ldrh	r2, [r7, #2]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	615a      	str	r2, [r3, #20]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000f90:	79bb      	ldrb	r3, [r7, #6]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	220f      	movs	r2, #15
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000fa0:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <GPIO_EXTILineConfig+0x7c>)
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	3302      	adds	r3, #2
 8000faa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <GPIO_EXTILineConfig+0x7c>)
 8000fb4:	79b9      	ldrb	r1, [r7, #6]
 8000fb6:	0889      	lsrs	r1, r1, #2
 8000fb8:	b2c9      	uxtb	r1, r1
 8000fba:	401a      	ands	r2, r3
 8000fbc:	1c8b      	adds	r3, r1, #2
 8000fbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8000fc2:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <GPIO_EXTILineConfig+0x7c>)
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	3302      	adds	r3, #2
 8000fcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fd0:	79f9      	ldrb	r1, [r7, #7]
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <GPIO_EXTILineConfig+0x7c>)
 8000fe0:	79b9      	ldrb	r1, [r7, #6]
 8000fe2:	0889      	lsrs	r1, r1, #2
 8000fe4:	b2c9      	uxtb	r1, r1
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	1c8b      	adds	r3, r1, #2
 8000fea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	40010000 	.word	0x40010000

08000ffc <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	84fb      	strh	r3, [r7, #38]	; 0x26
 800100a:	2300      	movs	r3, #0
 800100c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800100e:	2304      	movs	r3, #4
 8001010:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8001012:	4b57      	ldr	r3, [pc, #348]	; (8001170 <I2C_Init+0x174>)
 8001014:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	889b      	ldrh	r3, [r3, #4]
 800101a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 800101c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800101e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001022:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	4618      	mov	r0, r3
 800102a:	f000 f9a1 	bl	8001370 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	4a4f      	ldr	r2, [pc, #316]	; (8001174 <I2C_Init+0x178>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	0c9b      	lsrs	r3, r3, #18
 800103c:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800103e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001040:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001042:	4313      	orrs	r3, r2
 8001044:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800104a:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	b29b      	uxth	r3, r3
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	b29a      	uxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a44      	ldr	r2, [pc, #272]	; (8001178 <I2C_Init+0x17c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d815      	bhi.n	8001096 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8001078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800107a:	2b03      	cmp	r3, #3
 800107c:	d801      	bhi.n	8001082 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800107e:	2304      	movs	r3, #4
 8001080:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001082:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001086:	4313      	orrs	r3, r2
 8001088:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800108a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800108c:	3301      	adds	r3, #1
 800108e:	b29a      	uxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	841a      	strh	r2, [r3, #32]
 8001094:	e040      	b.n	8001118 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	88db      	ldrh	r3, [r3, #6]
 800109a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800109e:	4293      	cmp	r3, r2
 80010a0:	d109      	bne.n	80010b6 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80010b4:	e00e      	b.n	80010d4 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	009a      	lsls	r2, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80010cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d2:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 80010d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d103      	bne.n	80010e6 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80010de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 80010e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010f6:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80010f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <I2C_Init+0x180>)
 8001104:	fb82 1203 	smull	r1, r2, r2, r3
 8001108:	1192      	asrs	r2, r2, #6
 800110a:	17db      	asrs	r3, r3, #31
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	b29b      	uxth	r3, r3
 8001110:	3301      	adds	r3, #1
 8001112:	b29a      	uxth	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800111c:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	b29a      	uxth	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001134:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001136:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800113a:	f023 0302 	bic.w	r3, r3, #2
 800113e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	889a      	ldrh	r2, [r3, #4]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	895b      	ldrh	r3, [r3, #10]
 8001148:	4313      	orrs	r3, r2
 800114a:	b29a      	uxth	r2, r3
 800114c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800114e:	4313      	orrs	r3, r2
 8001150:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001156:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	899a      	ldrh	r2, [r3, #12]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	891b      	ldrh	r3, [r3, #8]
 8001160:	4313      	orrs	r3, r2
 8001162:	b29a      	uxth	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	811a      	strh	r2, [r3, #8]
}
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	; 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	007a1200 	.word	0x007a1200
 8001174:	431bde83 	.word	0x431bde83
 8001178:	000186a0 	.word	0x000186a0
 800117c:	10624dd3 	.word	0x10624dd3

08001180 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d008      	beq.n	80011a4 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	b29a      	uxth	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 80011a2:	e007      	b.n	80011b4 <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	f023 0301 	bic.w	r3, r3, #1
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	801a      	strh	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d008      	beq.n	80011e2 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011da:	b29a      	uxth	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 80011e0:	e007      	b.n	80011f2 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	801a      	strh	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d008      	beq.n	8001220 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001218:	b29a      	uxth	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 800121e:	e007      	b.n	8001230 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	801a      	strh	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	821a      	strh	r2, [r3, #16]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	8a1b      	ldrh	r3, [r3, #16]
 8001264:	b29b      	uxth	r3, r3
 8001266:	b2db      	uxtb	r3, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	460b      	mov	r3, r1
 800127c:	70fb      	strb	r3, [r7, #3]
 800127e:	4613      	mov	r3, r2
 8001280:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001282:	78bb      	ldrb	r3, [r7, #2]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d004      	beq.n	8001292 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	70fb      	strb	r3, [r7, #3]
 8001290:	e003      	b.n	800129a <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800129a:	78fb      	ldrb	r3, [r7, #3]
 800129c:	b29a      	uxth	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	821a      	strh	r2, [r3, #16]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80012c2:	2300      	movs	r3, #0
 80012c4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	8a9b      	ldrh	r3, [r3, #20]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	8b1b      	ldrh	r3, [r3, #24]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	041b      	lsls	r3, r3, #16
 80012da:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80012e6:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	4013      	ands	r3, r2
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d102      	bne.n	80012fa <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80012f4:	2301      	movs	r3, #1
 80012f6:	75fb      	strb	r3, [r7, #23]
 80012f8:	e001      	b.n	80012fe <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 80012fa:	2300      	movs	r3, #0
 80012fc:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001300:	4618      	mov	r0, r3
 8001302:	371c      	adds	r7, #28
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800130a:	b480      	push	{r7}
 800130c:	b087      	sub	sp, #28
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	0f1b      	lsrs	r3, r3, #28
 8001328:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001330:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3314      	adds	r3, #20
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	e005      	b.n	800134c <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	0c1b      	lsrs	r3, r3, #16
 8001344:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3318      	adds	r3, #24
 800134a:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	4013      	ands	r3, r2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001358:	2301      	movs	r3, #1
 800135a:	75fb      	strb	r3, [r7, #23]
 800135c:	e001      	b.n	8001362 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001362:	7dfb      	ldrb	r3, [r7, #23]
}
 8001364:	4618      	mov	r0, r3
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
	...

08001370 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001388:	4b4f      	ldr	r3, [pc, #316]	; (80014c8 <RCC_GetClocksFreq+0x158>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b08      	cmp	r3, #8
 8001396:	d011      	beq.n	80013bc <RCC_GetClocksFreq+0x4c>
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	2b08      	cmp	r3, #8
 800139c:	d83a      	bhi.n	8001414 <RCC_GetClocksFreq+0xa4>
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <RCC_GetClocksFreq+0x3c>
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d004      	beq.n	80013b4 <RCC_GetClocksFreq+0x44>
 80013aa:	e033      	b.n	8001414 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a47      	ldr	r2, [pc, #284]	; (80014cc <RCC_GetClocksFreq+0x15c>)
 80013b0:	601a      	str	r2, [r3, #0]
      break;
 80013b2:	e033      	b.n	800141c <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a45      	ldr	r2, [pc, #276]	; (80014cc <RCC_GetClocksFreq+0x15c>)
 80013b8:	601a      	str	r2, [r3, #0]
      break;
 80013ba:	e02f      	b.n	800141c <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80013bc:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <RCC_GetClocksFreq+0x158>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80013c4:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80013c6:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <RCC_GetClocksFreq+0x158>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	0c9b      	lsrs	r3, r3, #18
 80013d4:	3302      	adds	r3, #2
 80013d6:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d106      	bne.n	80013ec <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4a3b      	ldr	r2, [pc, #236]	; (80014d0 <RCC_GetClocksFreq+0x160>)
 80013e2:	fb03 f202 	mul.w	r2, r3, r2
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80013ea:	e017      	b.n	800141c <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80013ec:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <RCC_GetClocksFreq+0x158>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4a35      	ldr	r2, [pc, #212]	; (80014d0 <RCC_GetClocksFreq+0x160>)
 80013fc:	fb03 f202 	mul.w	r2, r3, r2
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	601a      	str	r2, [r3, #0]
      break;
 8001404:	e00a      	b.n	800141c <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4a30      	ldr	r2, [pc, #192]	; (80014cc <RCC_GetClocksFreq+0x15c>)
 800140a:	fb03 f202 	mul.w	r2, r3, r2
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	601a      	str	r2, [r3, #0]
      break;
 8001412:	e003      	b.n	800141c <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a2d      	ldr	r2, [pc, #180]	; (80014cc <RCC_GetClocksFreq+0x15c>)
 8001418:	601a      	str	r2, [r3, #0]
      break;
 800141a:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800141c:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <RCC_GetClocksFreq+0x158>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001424:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800142c:	4a29      	ldr	r2, [pc, #164]	; (80014d4 <RCC_GetClocksFreq+0x164>)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	4413      	add	r3, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	40da      	lsrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <RCC_GetClocksFreq+0x158>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800144c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001454:	4a1f      	ldr	r2, [pc, #124]	; (80014d4 <RCC_GetClocksFreq+0x164>)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	4413      	add	r3, r2
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	40da      	lsrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <RCC_GetClocksFreq+0x158>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001474:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	0adb      	lsrs	r3, r3, #11
 800147a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800147c:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <RCC_GetClocksFreq+0x164>)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	40da      	lsrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <RCC_GetClocksFreq+0x158>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800149c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	0b9b      	lsrs	r3, r3, #14
 80014a2:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80014a4:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <RCC_GetClocksFreq+0x168>)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	4413      	add	r3, r2
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]
}
 80014be:	bf00      	nop
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	40021000 	.word	0x40021000
 80014cc:	007a1200 	.word	0x007a1200
 80014d0:	003d0900 	.word	0x003d0900
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000010 	.word	0x20000010

080014dc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d006      	beq.n	80014fc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <RCC_APB2PeriphClockCmd+0x38>)
 80014f0:	699a      	ldr	r2, [r3, #24]
 80014f2:	4908      	ldr	r1, [pc, #32]	; (8001514 <RCC_APB2PeriphClockCmd+0x38>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80014fa:	e006      	b.n	800150a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <RCC_APB2PeriphClockCmd+0x38>)
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	43db      	mvns	r3, r3
 8001504:	4903      	ldr	r1, [pc, #12]	; (8001514 <RCC_APB2PeriphClockCmd+0x38>)
 8001506:	4013      	ands	r3, r2
 8001508:	618b      	str	r3, [r1, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	40021000 	.word	0x40021000

08001518 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <RCC_APB1PeriphClockCmd+0x38>)
 800152c:	69da      	ldr	r2, [r3, #28]
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <RCC_APB1PeriphClockCmd+0x38>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4313      	orrs	r3, r2
 8001534:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001536:	e006      	b.n	8001546 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <RCC_APB1PeriphClockCmd+0x38>)
 800153a:	69da      	ldr	r2, [r3, #28]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	43db      	mvns	r3, r3
 8001540:	4903      	ldr	r1, [pc, #12]	; (8001550 <RCC_APB1PeriphClockCmd+0x38>)
 8001542:	4013      	ands	r3, r2
 8001544:	61cb      	str	r3, [r1, #28]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	40021000 	.word	0x40021000

08001554 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001568:	89fb      	ldrh	r3, [r7, #14]
 800156a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800156e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	881a      	ldrh	r2, [r3, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	885b      	ldrh	r3, [r3, #2]
 8001578:	4313      	orrs	r3, r2
 800157a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001580:	4313      	orrs	r3, r2
 8001582:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001588:	4313      	orrs	r3, r2
 800158a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001590:	4313      	orrs	r3, r2
 8001592:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001598:	4313      	orrs	r3, r2
 800159a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	89fb      	ldrh	r3, [r7, #14]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	89fa      	ldrh	r2, [r7, #14]
 80015b6:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	8b9b      	ldrh	r3, [r3, #28]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	8a1a      	ldrh	r2, [r3, #16]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	821a      	strh	r2, [r3, #16]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80015fc:	e007      	b.n	800160e <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001608:	b29a      	uxth	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	801a      	strh	r2, [r3, #0]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	819a      	strh	r2, [r3, #12]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	891b      	ldrh	r3, [r3, #8]
 8001648:	b29a      	uxth	r2, r3
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	4013      	ands	r3, r2
 800164e:	b29b      	uxth	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e001      	b.n	800165e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
	...

0800166c <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	da0b      	bge.n	8001698 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <NVIC_SetPriority+0x4c>)
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	3b04      	subs	r3, #4
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001696:	e009      	b.n	80016ac <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <NVIC_SetPriority+0x50>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate 
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ce:	d301      	bcc.n	80016d4 <SysTick_Config+0x14>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e011      	b.n	80016f8 <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016da:	4a09      	ldr	r2, [pc, #36]	; (8001700 <SysTick_Config+0x40>)
 80016dc:	3b01      	subs	r3, #1
 80016de:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80016e0:	210f      	movs	r1, #15
 80016e2:	f04f 30ff 	mov.w	r0, #4294967295
 80016e6:	f7ff ffc1 	bl	800166c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <SysTick_Config+0x40>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <SysTick_Config+0x40>)
 80016f2:	2207      	movs	r2, #7
 80016f4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	e000e010 	.word	0xe000e010

08001704 <main>:
void MPU6050_InteruptPinInit();
acc_value_t MPU6050_ReadAcc(double accIntensity);
void ProcessPedometer();

int main()
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 8001708:	f000 fc40 	bl	8001f8c <SystemCoreClockUpdate>
	SysTick_Init();
 800170c:	f000 f810 	bl	8001730 <SysTick_Init>
	SPI1_MasterInit();
 8001710:	f000 f862 	bl	80017d8 <SPI1_MasterInit>
	MAX7219_Init();
 8001714:	f000 f8ce 	bl	80018b4 <MAX7219_Init>
	I2C2_Init();
 8001718:	f000 f92c 	bl	8001974 <I2C2_Init>
	MPU6050_Init();
 800171c:	f000 fa44 	bl	8001ba8 <MPU6050_Init>
	MPU6050_InteruptPinInit();
 8001720:	f000 fa6c 	bl	8001bfc <MPU6050_InteruptPinInit>
	MAX7219_Display(0);
 8001724:	2000      	movs	r0, #0
 8001726:	f000 f8e5 	bl	80018f4 <MAX7219_Display>

	while (1)
	{
		ProcessPedometer();
 800172a:	f000 fb91 	bl	8001e50 <ProcessPedometer>
 800172e:	e7fc      	b.n	800172a <main+0x26>

08001730 <SysTick_Init>:
	}
}

void SysTick_Init()
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <SysTick_Init+0x1c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a05      	ldr	r2, [pc, #20]	; (8001750 <SysTick_Init+0x20>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	099b      	lsrs	r3, r3, #6
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ffbd 	bl	80016c0 <SysTick_Config>
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000014 	.word	0x20000014
 8001750:	10624dd3 	.word	0x10624dd3

08001754 <SysTick_Handler>:

void SysTick_Handler()
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
	msTick++;
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <SysTick_Handler+0x18>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	4a03      	ldr	r2, [pc, #12]	; (800176c <SysTick_Handler+0x18>)
 8001760:	6013      	str	r3, [r2, #0]
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	200000a8 	.word	0x200000a8

08001770 <SysTick_getTick>:

uint32_t SysTick_getTick()
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	return msTick;
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <SysTick_getTick+0x10>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	200000a8 	.word	0x200000a8

08001784 <Delay_ms>:

void Delay_ms(uint32_t ms)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	uint32_t to, t1, t = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]

	to = SysTick_getTick();
 8001790:	f7ff ffee 	bl	8001770 <SysTick_getTick>
 8001794:	6178      	str	r0, [r7, #20]

	do
	{
		t1 = SysTick_getTick();
 8001796:	f7ff ffeb 	bl	8001770 <SysTick_getTick>
 800179a:	60f8      	str	r0, [r7, #12]

		if (t1 >= to)
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d306      	bcc.n	80017b2 <Delay_ms+0x2e>
		{
			t += (t1 - to);
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4413      	add	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	e006      	b.n	80017c0 <Delay_ms+0x3c>
		}
		else
		{
			t += (0xFFFFFFFFu + t1 - to);
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	1ad2      	subs	r2, r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4413      	add	r3, r2
 80017bc:	3b01      	subs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
		}

		to = t1;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	617b      	str	r3, [r7, #20]
	} while (t < ms);
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d3e4      	bcc.n	8001796 <Delay_ms+0x12>
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <SPI1_MasterInit>:

void SPI1_MasterInit()
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Init_Structure;
	SPI_InitTypeDef SPI_Init_Structure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80017de:	2101      	movs	r1, #1
 80017e0:	2008      	movs	r0, #8
 80017e2:	f7ff fe7b 	bl	80014dc <RCC_APB2PeriphClockCmd>
	GPIO_Init_Structure.GPIO_Mode = GPIO_Mode_AF_PP;
 80017e6:	2318      	movs	r3, #24
 80017e8:	75fb      	strb	r3, [r7, #23]
	GPIO_Init_Structure.GPIO_Pin = SPI2_SCK_PIN | SPI2_MOSI_PIN;
 80017ea:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80017ee:	82bb      	strh	r3, [r7, #20]
	GPIO_Init_Structure.GPIO_Speed = GPIO_Speed_50MHz;
 80017f0:	2303      	movs	r3, #3
 80017f2:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(SPI2_GPIO_PORT, &GPIO_Init_Structure);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	481a      	ldr	r0, [pc, #104]	; (8001864 <SPI1_MasterInit+0x8c>)
 80017fc:	f7ff fae6 	bl	8000dcc <GPIO_Init>

	GPIO_Init_Structure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001800:	2310      	movs	r3, #16
 8001802:	75fb      	strb	r3, [r7, #23]
	GPIO_Init_Structure.GPIO_Pin = SPI2_NSS_PIN;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	82bb      	strh	r3, [r7, #20]
	GPIO_Init_Structure.GPIO_Speed = GPIO_Speed_50MHz;
 800180a:	2303      	movs	r3, #3
 800180c:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(GPIOB, &GPIO_Init_Structure);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	4813      	ldr	r0, [pc, #76]	; (8001864 <SPI1_MasterInit+0x8c>)
 8001816:	f7ff fad9 	bl	8000dcc <GPIO_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 800181a:	2101      	movs	r1, #1
 800181c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001820:	f7ff fe7a 	bl	8001518 <RCC_APB1PeriphClockCmd>
	SPI_Init_Structure.SPI_Mode = SPI_Mode_Master;
 8001824:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001828:	807b      	strh	r3, [r7, #2]
	SPI_Init_Structure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800182a:	2300      	movs	r3, #0
 800182c:	803b      	strh	r3, [r7, #0]
	SPI_Init_Structure.SPI_CPOL = SPI_CPOL_Low;
 800182e:	2300      	movs	r3, #0
 8001830:	80fb      	strh	r3, [r7, #6]
	SPI_Init_Structure.SPI_CPHA = SPI_CPHA_1Edge;
 8001832:	2300      	movs	r3, #0
 8001834:	813b      	strh	r3, [r7, #8]
	SPI_Init_Structure.SPI_DataSize = SPI_DataSize_16b;
 8001836:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800183a:	80bb      	strh	r3, [r7, #4]
	SPI_Init_Structure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32;
 800183c:	2320      	movs	r3, #32
 800183e:	81bb      	strh	r3, [r7, #12]
	SPI_Init_Structure.SPI_FirstBit = SPI_FirstBit_MSB;
 8001840:	2300      	movs	r3, #0
 8001842:	81fb      	strh	r3, [r7, #14]
	SPI_Init_Structure.SPI_NSS = SPI_NSS_Soft;
 8001844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001848:	817b      	strh	r3, [r7, #10]
	SPI_Init(SPI2, &SPI_Init_Structure);
 800184a:	463b      	mov	r3, r7
 800184c:	4619      	mov	r1, r3
 800184e:	4806      	ldr	r0, [pc, #24]	; (8001868 <SPI1_MasterInit+0x90>)
 8001850:	f7ff fe80 	bl	8001554 <SPI_Init>
	SPI_Cmd(SPI2, ENABLE);
 8001854:	2101      	movs	r1, #1
 8001856:	4804      	ldr	r0, [pc, #16]	; (8001868 <SPI1_MasterInit+0x90>)
 8001858:	f7ff febf 	bl	80015da <SPI_Cmd>
}
 800185c:	bf00      	nop
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40010c00 	.word	0x40010c00
 8001868:	40003800 	.word	0x40003800

0800186c <SPIx_Send_Data>:

void SPIx_Send_Data(SPI_TypeDef * SPIx, uint16_t data)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
	GPIO_ResetBits(SPI2_GPIO_PORT, SPI2_NSS_PIN);
 8001878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800187c:	480c      	ldr	r0, [pc, #48]	; (80018b0 <SPIx_Send_Data+0x44>)
 800187e:	f7ff fb6f 	bl	8000f60 <GPIO_ResetBits>
	SPI_I2S_SendData(SPIx, data);
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff fec6 	bl	8001618 <SPI_I2S_SendData>
	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == 1);
 800188c:	bf00      	nop
 800188e:	2180      	movs	r1, #128	; 0x80
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fecf 	bl	8001634 <SPI_I2S_GetFlagStatus>
 8001896:	4603      	mov	r3, r0
 8001898:	2b01      	cmp	r3, #1
 800189a:	d0f8      	beq.n	800188e <SPIx_Send_Data+0x22>
	GPIO_SetBits(SPI2_GPIO_PORT, SPI2_NSS_PIN);
 800189c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a0:	4803      	ldr	r0, [pc, #12]	; (80018b0 <SPIx_Send_Data+0x44>)
 80018a2:	f7ff fb4f 	bl	8000f44 <GPIO_SetBits>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40010c00 	.word	0x40010c00

080018b4 <MAX7219_Init>:

void MAX7219_Init()
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	// Decode mode
	SPIx_Send_Data(SPI2, (0x09 << 8) | 0xFF);
 80018b8:	f640 11ff 	movw	r1, #2559	; 0x9ff
 80018bc:	480c      	ldr	r0, [pc, #48]	; (80018f0 <MAX7219_Init+0x3c>)
 80018be:	f7ff ffd5 	bl	800186c <SPIx_Send_Data>
	// Intensity
	SPIx_Send_Data(SPI2, (0x0A << 8) | 0x09);
 80018c2:	f640 2109 	movw	r1, #2569	; 0xa09
 80018c6:	480a      	ldr	r0, [pc, #40]	; (80018f0 <MAX7219_Init+0x3c>)
 80018c8:	f7ff ffd0 	bl	800186c <SPIx_Send_Data>
	// Scan limit
	SPIx_Send_Data(SPI2, (0x0B << 8) | 0x07);
 80018cc:	f640 3107 	movw	r1, #2823	; 0xb07
 80018d0:	4807      	ldr	r0, [pc, #28]	; (80018f0 <MAX7219_Init+0x3c>)
 80018d2:	f7ff ffcb 	bl	800186c <SPIx_Send_Data>
	// Shutdown mode
	SPIx_Send_Data(SPI2, (0x0C << 8) | 0x01);
 80018d6:	f640 4101 	movw	r1, #3073	; 0xc01
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MAX7219_Init+0x3c>)
 80018dc:	f7ff ffc6 	bl	800186c <SPIx_Send_Data>
	// Display test
	SPIx_Send_Data(SPI2, (0x0F << 8) | 0x00);
 80018e0:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <MAX7219_Init+0x3c>)
 80018e6:	f7ff ffc1 	bl	800186c <SPIx_Send_Data>
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40003800 	.word	0x40003800

080018f4 <MAX7219_Display>:

void MAX7219_Display(uint16_t number)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
	uint8_t count = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]

	do
	{
		count++;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	3301      	adds	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
		SPIx_Send_Data(SPI2, (count << 8) | (uint8_t)(number % 10));
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	b218      	sxth	r0, r3
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <MAX7219_Display+0x78>)
 8001912:	fba3 1302 	umull	r1, r3, r3, r2
 8001916:	08d9      	lsrs	r1, r3, #3
 8001918:	460b      	mov	r3, r1
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	b29b      	uxth	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	b21b      	sxth	r3, r3
 8001928:	4303      	orrs	r3, r0
 800192a:	b21b      	sxth	r3, r3
 800192c:	b29b      	uxth	r3, r3
 800192e:	4619      	mov	r1, r3
 8001930:	480f      	ldr	r0, [pc, #60]	; (8001970 <MAX7219_Display+0x7c>)
 8001932:	f7ff ff9b 	bl	800186c <SPIx_Send_Data>
		number /= 10;
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	4a0c      	ldr	r2, [pc, #48]	; (800196c <MAX7219_Display+0x78>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	08db      	lsrs	r3, r3, #3
 8001940:	80fb      	strh	r3, [r7, #6]
	} while (number > 0);
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1dc      	bne.n	8001902 <MAX7219_Display+0xe>

	// scan limit
	SPIx_Send_Data(SPI2, (0x0B << 8) | (count - 1));
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	b29b      	uxth	r3, r3
 800194c:	3b01      	subs	r3, #1
 800194e:	b29b      	uxth	r3, r3
 8001950:	b21b      	sxth	r3, r3
 8001952:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 8001956:	b21b      	sxth	r3, r3
 8001958:	b29b      	uxth	r3, r3
 800195a:	4619      	mov	r1, r3
 800195c:	4804      	ldr	r0, [pc, #16]	; (8001970 <MAX7219_Display+0x7c>)
 800195e:	f7ff ff85 	bl	800186c <SPIx_Send_Data>
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	cccccccd 	.word	0xcccccccd
 8001970:	40003800 	.word	0x40003800

08001974 <I2C2_Init>:

void I2C2_Init()
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;
	I2C_InitTypeDef		I2C_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 800197a:	2101      	movs	r1, #1
 800197c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001980:	f7ff fdca 	bl	8001518 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001984:	2101      	movs	r1, #1
 8001986:	2008      	movs	r0, #8
 8001988:	f7ff fda8 	bl	80014dc <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 800198c:	231c      	movs	r3, #28
 800198e:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001990:	2303      	movs	r3, #3
 8001992:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Pin = I2C2_GPIO_SCL_PIN | I2C2_GPIO_SDA_PIN;
 8001994:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001998:	82bb      	strh	r3, [r7, #20]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	480e      	ldr	r0, [pc, #56]	; (80019dc <I2C2_Init+0x68>)
 80019a2:	f7ff fa13 	bl	8000dcc <GPIO_Init>

	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80019a6:	2300      	movs	r3, #0
 80019a8:	813b      	strh	r3, [r7, #8]
	I2C_InitStructure.I2C_ClockSpeed = 400000;
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <I2C2_Init+0x6c>)
 80019ac:	607b      	str	r3, [r7, #4]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80019ae:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80019b2:	817b      	strh	r3, [r7, #10]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Disable;
 80019b4:	2300      	movs	r3, #0
 80019b6:	81fb      	strh	r3, [r7, #14]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80019b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019bc:	823b      	strh	r3, [r7, #16]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 80019be:	2300      	movs	r3, #0
 80019c0:	81bb      	strh	r3, [r7, #12]
	I2C_Init(I2C2, &I2C_InitStructure);
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4807      	ldr	r0, [pc, #28]	; (80019e4 <I2C2_Init+0x70>)
 80019c8:	f7ff fb18 	bl	8000ffc <I2C_Init>
	I2C_Cmd(I2C2, ENABLE);
 80019cc:	2101      	movs	r1, #1
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <I2C2_Init+0x70>)
 80019d0:	f7ff fbd6 	bl	8001180 <I2C_Cmd>
}
 80019d4:	bf00      	nop
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40010c00 	.word	0x40010c00
 80019e0:	00061a80 	.word	0x00061a80
 80019e4:	40005800 	.word	0x40005800

080019e8 <I2Cx_SendData>:

void I2Cx_SendData(I2C_TypeDef * I2Cx, uint8_t SlaveAddress, uint8_t RegisterAddress, uint8_t data)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	4608      	mov	r0, r1
 80019f2:	4611      	mov	r1, r2
 80019f4:	461a      	mov	r2, r3
 80019f6:	4603      	mov	r3, r0
 80019f8:	70fb      	strb	r3, [r7, #3]
 80019fa:	460b      	mov	r3, r1
 80019fc:	70bb      	strb	r3, [r7, #2]
 80019fe:	4613      	mov	r3, r2
 8001a00:	707b      	strb	r3, [r7, #1]
	// I2C start
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8001a02:	bf00      	nop
 8001a04:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff fc7e 	bl	800130a <I2C_GetFlagStatus>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f7      	bne.n	8001a04 <I2Cx_SendData+0x1c>
	I2C_GenerateSTART(I2Cx, ENABLE);
 8001a14:	2101      	movs	r1, #1
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fbd1 	bl	80011be <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 8001a1c:	bf00      	nop
 8001a1e:	491c      	ldr	r1, [pc, #112]	; (8001a90 <I2Cx_SendData+0xa8>)
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fc43 	bl	80012ac <I2C_CheckEvent>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f8      	beq.n	8001a1e <I2Cx_SendData+0x36>
	// I2C address phase
	I2C_Send7bitAddress(I2Cx, SlaveAddress << 1, I2C_Direction_Transmitter);
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2200      	movs	r2, #0
 8001a34:	4619      	mov	r1, r3
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fc1b 	bl	8001272 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8001a3c:	bf00      	nop
 8001a3e:	4915      	ldr	r1, [pc, #84]	; (8001a94 <I2Cx_SendData+0xac>)
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff fc33 	bl	80012ac <I2C_CheckEvent>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f8      	beq.n	8001a3e <I2Cx_SendData+0x56>
	I2C_SendData(I2Cx, RegisterAddress);
 8001a4c:	78bb      	ldrb	r3, [r7, #2]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff fbf2 	bl	800123a <I2C_SendData>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001a56:	bf00      	nop
 8001a58:	490f      	ldr	r1, [pc, #60]	; (8001a98 <I2Cx_SendData+0xb0>)
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fc26 	bl	80012ac <I2C_CheckEvent>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f8      	beq.n	8001a58 <I2Cx_SendData+0x70>
	I2C_SendData(I2Cx, data);
 8001a66:	787b      	ldrb	r3, [r7, #1]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fbe5 	bl	800123a <I2C_SendData>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001a70:	bf00      	nop
 8001a72:	4909      	ldr	r1, [pc, #36]	; (8001a98 <I2Cx_SendData+0xb0>)
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff fc19 	bl	80012ac <I2C_CheckEvent>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f8      	beq.n	8001a72 <I2Cx_SendData+0x8a>
	I2C_GenerateSTOP(I2Cx, ENABLE);
 8001a80:	2101      	movs	r1, #1
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fbba 	bl	80011fc <I2C_GenerateSTOP>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	00030001 	.word	0x00030001
 8001a94:	00070082 	.word	0x00070082
 8001a98:	00070084 	.word	0x00070084

08001a9c <I2Cx_ReceiveData>:

uint8_t I2Cx_ReceiveData(I2C_TypeDef * I2Cx, uint8_t SlaveAddress, uint8_t RegisterAddress)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	70bb      	strb	r3, [r7, #2]
	uint8_t data = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]

	// I2C start
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8001ab0:	bf00      	nop
 8001ab2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fc27 	bl	800130a <I2C_GetFlagStatus>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f7      	bne.n	8001ab2 <I2Cx_ReceiveData+0x16>
	I2C_GenerateSTART(I2Cx, ENABLE);
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fb7a 	bl	80011be <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 8001aca:	bf00      	nop
 8001acc:	4931      	ldr	r1, [pc, #196]	; (8001b94 <I2Cx_ReceiveData+0xf8>)
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fbec 	bl	80012ac <I2C_CheckEvent>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f8      	beq.n	8001acc <I2Cx_ReceiveData+0x30>
	// I2C address phase
	I2C_Send7bitAddress(I2Cx, SlaveAddress << 1, I2C_Direction_Transmitter);
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fbc4 	bl	8001272 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8001aea:	bf00      	nop
 8001aec:	492a      	ldr	r1, [pc, #168]	; (8001b98 <I2Cx_ReceiveData+0xfc>)
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fbdc 	bl	80012ac <I2C_CheckEvent>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f8      	beq.n	8001aec <I2Cx_ReceiveData+0x50>
	// I2C send register address
	I2C_SendData(I2Cx, RegisterAddress);
 8001afa:	78bb      	ldrb	r3, [r7, #2]
 8001afc:	4619      	mov	r1, r3
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fb9b 	bl	800123a <I2C_SendData>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001b04:	bf00      	nop
 8001b06:	4925      	ldr	r1, [pc, #148]	; (8001b9c <I2Cx_ReceiveData+0x100>)
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff fbcf 	bl	80012ac <I2C_CheckEvent>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f8      	beq.n	8001b06 <I2Cx_ReceiveData+0x6a>
	// I2C stop
	I2C_GenerateSTOP(I2Cx, ENABLE);
 8001b14:	2101      	movs	r1, #1
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fb70 	bl	80011fc <I2C_GenerateSTOP>

	// I2C repeat start
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8001b1c:	bf00      	nop
 8001b1e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fbf1 	bl	800130a <I2C_GetFlagStatus>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f7      	bne.n	8001b1e <I2Cx_ReceiveData+0x82>
	I2C_GenerateSTART(I2Cx, ENABLE);
 8001b2e:	2101      	movs	r1, #1
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff fb44 	bl	80011be <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 8001b36:	bf00      	nop
 8001b38:	4916      	ldr	r1, [pc, #88]	; (8001b94 <I2Cx_ReceiveData+0xf8>)
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fbb6 	bl	80012ac <I2C_CheckEvent>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f8      	beq.n	8001b38 <I2Cx_ReceiveData+0x9c>
	// I2C address phase
	I2C_Send7bitAddress(I2Cx, SlaveAddress << 1, I2C_Direction_Receiver);
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4619      	mov	r1, r3
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff fb8e 	bl	8001272 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8001b56:	bf00      	nop
 8001b58:	4911      	ldr	r1, [pc, #68]	; (8001ba0 <I2Cx_ReceiveData+0x104>)
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fba6 	bl	80012ac <I2C_CheckEvent>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f8      	beq.n	8001b58 <I2Cx_ReceiveData+0xbc>
	// I2C receive data
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));
 8001b66:	bf00      	nop
 8001b68:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <I2Cx_ReceiveData+0x108>)
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fb9e 	bl	80012ac <I2C_CheckEvent>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f8      	beq.n	8001b68 <I2Cx_ReceiveData+0xcc>
	data = I2C_ReceiveData(I2Cx);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fb6e 	bl	8001258 <I2C_ReceiveData>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	73fb      	strb	r3, [r7, #15]
	// I2C stop
	I2C_GenerateSTOP(I2Cx, ENABLE);
 8001b80:	2101      	movs	r1, #1
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff fb3a 	bl	80011fc <I2C_GenerateSTOP>

	return data;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	00030001 	.word	0x00030001
 8001b98:	00070082 	.word	0x00070082
 8001b9c:	00070084 	.word	0x00070084
 8001ba0:	00030002 	.word	0x00030002
 8001ba4:	00030040 	.word	0x00030040

08001ba8 <MPU6050_Init>:

void MPU6050_Init()
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	// sample rate 100 Hz
	I2Cx_SendData(I2C2, MPU6050_ADDRESS, SMPRT_DIV_REGEGISTER, 0x09);
 8001bac:	2309      	movs	r3, #9
 8001bae:	2219      	movs	r2, #25
 8001bb0:	2168      	movs	r1, #104	; 0x68
 8001bb2:	4811      	ldr	r0, [pc, #68]	; (8001bf8 <MPU6050_Init+0x50>)
 8001bb4:	f7ff ff18 	bl	80019e8 <I2Cx_SendData>
	// DLPF
	I2Cx_SendData(I2C2, MPU6050_ADDRESS, CONFIG_REGISTER, 0x03);
 8001bb8:	2303      	movs	r3, #3
 8001bba:	221a      	movs	r2, #26
 8001bbc:	2168      	movs	r1, #104	; 0x68
 8001bbe:	480e      	ldr	r0, [pc, #56]	; (8001bf8 <MPU6050_Init+0x50>)
 8001bc0:	f7ff ff12 	bl	80019e8 <I2Cx_SendData>
	// gyro full scale 500 deg/s
	I2Cx_SendData(I2C2, MPU6050_ADDRESS, GYRO_CONFIG_REGISTER, 0x08);
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	221b      	movs	r2, #27
 8001bc8:	2168      	movs	r1, #104	; 0x68
 8001bca:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <MPU6050_Init+0x50>)
 8001bcc:	f7ff ff0c 	bl	80019e8 <I2Cx_SendData>
	// acc full scale 8g
	I2Cx_SendData(I2C2, MPU6050_ADDRESS, ACCEL_CONFIG_REGISTER, 0x10);
 8001bd0:	2310      	movs	r3, #16
 8001bd2:	221c      	movs	r2, #28
 8001bd4:	2168      	movs	r1, #104	; 0x68
 8001bd6:	4808      	ldr	r0, [pc, #32]	; (8001bf8 <MPU6050_Init+0x50>)
 8001bd8:	f7ff ff06 	bl	80019e8 <I2Cx_SendData>
	// power management
	I2Cx_SendData(I2C2, MPU6050_ADDRESS, PWR_MGMT_1_REGISTER, 0x00);
 8001bdc:	2300      	movs	r3, #0
 8001bde:	226b      	movs	r2, #107	; 0x6b
 8001be0:	2168      	movs	r1, #104	; 0x68
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MPU6050_Init+0x50>)
 8001be4:	f7ff ff00 	bl	80019e8 <I2Cx_SendData>
	// int enable
	I2Cx_SendData(I2C2, MPU6050_ADDRESS, INT_ENABLE_REGISTER, 0x01);
 8001be8:	2301      	movs	r3, #1
 8001bea:	2238      	movs	r2, #56	; 0x38
 8001bec:	2168      	movs	r1, #104	; 0x68
 8001bee:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <MPU6050_Init+0x50>)
 8001bf0:	f7ff fefa 	bl	80019e8 <I2Cx_SendData>
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40005800 	.word	0x40005800

08001bfc <MPU6050_InteruptPinInit>:

void MPU6050_InteruptPinInit()
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 8001c02:	2101      	movs	r1, #1
 8001c04:	2005      	movs	r0, #5
 8001c06:	f7ff fc69 	bl	80014dc <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8001c0a:	2348      	movs	r3, #72	; 0x48
 8001c0c:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 8001c12:	2302      	movs	r3, #2
 8001c14:	81bb      	strh	r3, [r7, #12]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4811      	ldr	r0, [pc, #68]	; (8001c64 <MPU6050_InteruptPinInit+0x68>)
 8001c1e:	f7ff f8d5 	bl	8000dcc <GPIO_Init>

	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource1);
 8001c22:	2101      	movs	r1, #1
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff f9a9 	bl	8000f7c <GPIO_EXTILineConfig>
	EXTI_InitStructure.EXTI_Line = EXTI_Line1;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	607b      	str	r3, [r7, #4]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	72bb      	strb	r3, [r7, #10]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001c32:	2300      	movs	r3, #0
 8001c34:	723b      	strb	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8001c36:	230c      	movs	r3, #12
 8001c38:	727b      	strb	r3, [r7, #9]
	EXTI_Init(&EXTI_InitStructure);
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff f82b 	bl	8000c98 <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 8001c42:	2307      	movs	r3, #7
 8001c44:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001c46:	2301      	movs	r3, #1
 8001c48:	70fb      	strb	r3, [r7, #3]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	70bb      	strb	r3, [r7, #2]
	NVIC_Init(&NVIC_InitStructure);
 8001c52:	463b      	mov	r3, r7
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe ffbd 	bl	8000bd4 <NVIC_Init>
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40010800 	.word	0x40010800

08001c68 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
	if (EXTI_GetFlagStatus(EXTI_Line1) == 1)
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f7ff f884 	bl	8000d7c <EXTI_GetFlagStatus>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d156      	bne.n	8001d28 <EXTI1_IRQHandler+0xc0>
	{
		acc_value = MPU6050_ReadAcc(4096);
 8001c7a:	4c2d      	ldr	r4, [pc, #180]	; (8001d30 <EXTI1_IRQHandler+0xc8>)
 8001c7c:	4639      	mov	r1, r7
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <EXTI1_IRQHandler+0xcc>)
 8001c84:	4608      	mov	r0, r1
 8001c86:	f000 f85b 	bl	8001d40 <MPU6050_ReadAcc>
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		acc_total = sqrt(pow(acc_value.x, 2) + pow(acc_value.y, 2) + pow(acc_value.z, 2));
 8001c94:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <EXTI1_IRQHandler+0xc8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fbcd 	bl	8000438 <__aeabi_f2d>
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ca6:	f000 fabd 	bl	8002224 <pow>
 8001caa:	4604      	mov	r4, r0
 8001cac:	460d      	mov	r5, r1
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <EXTI1_IRQHandler+0xc8>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fbc0 	bl	8000438 <__aeabi_f2d>
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cc0:	f000 fab0 	bl	8002224 <pow>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4620      	mov	r0, r4
 8001cca:	4629      	mov	r1, r5
 8001ccc:	f7fe fa56 	bl	800017c <__adddf3>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4614      	mov	r4, r2
 8001cd6:	461d      	mov	r5, r3
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <EXTI1_IRQHandler+0xc8>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fbab 	bl	8000438 <__aeabi_f2d>
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cea:	f000 fa9b 	bl	8002224 <pow>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	f7fe fa41 	bl	800017c <__adddf3>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f000 faf7 	bl	80022f4 <sqrt>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f7fe fe9b 	bl	8000a48 <__aeabi_d2f>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <EXTI1_IRQHandler+0xd0>)
 8001d16:	6013      	str	r3, [r2, #0]

		I2Cx_ReceiveData(I2C2, MPU6050_ADDRESS, INT_STATUS_REGISTER);
 8001d18:	223a      	movs	r2, #58	; 0x3a
 8001d1a:	2168      	movs	r1, #104	; 0x68
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <EXTI1_IRQHandler+0xd4>)
 8001d1e:	f7ff febd 	bl	8001a9c <I2Cx_ReceiveData>
		EXTI_ClearITPendingBit(EXTI_Line1);
 8001d22:	2002      	movs	r0, #2
 8001d24:	f7ff f844 	bl	8000db0 <EXTI_ClearITPendingBit>
	}
}
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d30:	200000ac 	.word	0x200000ac
 8001d34:	40b00000 	.word	0x40b00000
 8001d38:	200000b8 	.word	0x200000b8
 8001d3c:	40005800 	.word	0x40005800

08001d40 <MPU6050_ReadAcc>:

acc_value_t MPU6050_ReadAcc(double accIntensity)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t highReg, lowReg;
	int16_t data;
	acc_value_t acc;

	highReg = I2Cx_ReceiveData(I2C2, MPU6050_ADDRESS, ACCEL_XOUT_REGISTER);
 8001d4c:	223b      	movs	r2, #59	; 0x3b
 8001d4e:	2168      	movs	r1, #104	; 0x68
 8001d50:	483d      	ldr	r0, [pc, #244]	; (8001e48 <MPU6050_ReadAcc+0x108>)
 8001d52:	f7ff fea3 	bl	8001a9c <I2Cx_ReceiveData>
 8001d56:	4603      	mov	r3, r0
 8001d58:	77fb      	strb	r3, [r7, #31]
	lowReg = I2Cx_ReceiveData(I2C2, MPU6050_ADDRESS, ACCEL_XOUT_REGISTER + 1);
 8001d5a:	223c      	movs	r2, #60	; 0x3c
 8001d5c:	2168      	movs	r1, #104	; 0x68
 8001d5e:	483a      	ldr	r0, [pc, #232]	; (8001e48 <MPU6050_ReadAcc+0x108>)
 8001d60:	f7ff fe9c 	bl	8001a9c <I2Cx_ReceiveData>
 8001d64:	4603      	mov	r3, r0
 8001d66:	77bb      	strb	r3, [r7, #30]
	data = (highReg << 8) | lowReg;
 8001d68:	7ffb      	ldrb	r3, [r7, #31]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	7fbb      	ldrb	r3, [r7, #30]
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	4313      	orrs	r3, r2
 8001d74:	83bb      	strh	r3, [r7, #28]
	acc.x = (double)data / accIntensity;
 8001d76:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fb4a 	bl	8000414 <__aeabi_i2d>
 8001d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d84:	f7fe fcda 	bl	800073c <__aeabi_ddiv>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7fe fe5a 	bl	8000a48 <__aeabi_d2f>
 8001d94:	4603      	mov	r3, r0
 8001d96:	613b      	str	r3, [r7, #16]

	highReg = I2Cx_ReceiveData(I2C2, MPU6050_ADDRESS, ACCEL_YOUT_REGISTER);
 8001d98:	223d      	movs	r2, #61	; 0x3d
 8001d9a:	2168      	movs	r1, #104	; 0x68
 8001d9c:	482a      	ldr	r0, [pc, #168]	; (8001e48 <MPU6050_ReadAcc+0x108>)
 8001d9e:	f7ff fe7d 	bl	8001a9c <I2Cx_ReceiveData>
 8001da2:	4603      	mov	r3, r0
 8001da4:	77fb      	strb	r3, [r7, #31]
	lowReg = I2Cx_ReceiveData(I2C2, MPU6050_ADDRESS, ACCEL_YOUT_REGISTER + 1);
 8001da6:	223e      	movs	r2, #62	; 0x3e
 8001da8:	2168      	movs	r1, #104	; 0x68
 8001daa:	4827      	ldr	r0, [pc, #156]	; (8001e48 <MPU6050_ReadAcc+0x108>)
 8001dac:	f7ff fe76 	bl	8001a9c <I2Cx_ReceiveData>
 8001db0:	4603      	mov	r3, r0
 8001db2:	77bb      	strb	r3, [r7, #30]
	data = (highReg << 8) | lowReg;
 8001db4:	7ffb      	ldrb	r3, [r7, #31]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	7fbb      	ldrb	r3, [r7, #30]
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	83bb      	strh	r3, [r7, #28]
	acc.y = (double)data / accIntensity;
 8001dc2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fb24 	bl	8000414 <__aeabi_i2d>
 8001dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dd0:	f7fe fcb4 	bl	800073c <__aeabi_ddiv>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f7fe fe34 	bl	8000a48 <__aeabi_d2f>
 8001de0:	4603      	mov	r3, r0
 8001de2:	617b      	str	r3, [r7, #20]

	highReg = I2Cx_ReceiveData(I2C2, MPU6050_ADDRESS, ACCEL_ZOUT_REGISTER);
 8001de4:	223f      	movs	r2, #63	; 0x3f
 8001de6:	2168      	movs	r1, #104	; 0x68
 8001de8:	4817      	ldr	r0, [pc, #92]	; (8001e48 <MPU6050_ReadAcc+0x108>)
 8001dea:	f7ff fe57 	bl	8001a9c <I2Cx_ReceiveData>
 8001dee:	4603      	mov	r3, r0
 8001df0:	77fb      	strb	r3, [r7, #31]
	lowReg = I2Cx_ReceiveData(I2C2, MPU6050_ADDRESS, ACCEL_ZOUT_REGISTER + 1);
 8001df2:	2240      	movs	r2, #64	; 0x40
 8001df4:	2168      	movs	r1, #104	; 0x68
 8001df6:	4814      	ldr	r0, [pc, #80]	; (8001e48 <MPU6050_ReadAcc+0x108>)
 8001df8:	f7ff fe50 	bl	8001a9c <I2Cx_ReceiveData>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	77bb      	strb	r3, [r7, #30]
	data = (highReg << 8) | lowReg;
 8001e00:	7ffb      	ldrb	r3, [r7, #31]
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	b21a      	sxth	r2, r3
 8001e06:	7fbb      	ldrb	r3, [r7, #30]
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	83bb      	strh	r3, [r7, #28]
	acc.z = (double)data / accIntensity;
 8001e0e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fafe 	bl	8000414 <__aeabi_i2d>
 8001e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e1c:	f7fe fc8e 	bl	800073c <__aeabi_ddiv>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7fe fe0e 	bl	8000a48 <__aeabi_d2f>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	61bb      	str	r3, [r7, #24]

	return acc;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	461c      	mov	r4, r3
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	3724      	adds	r7, #36	; 0x24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd90      	pop	{r4, r7, pc}
 8001e48:	40005800 	.word	0x40005800
 8001e4c:	00000000 	.word	0x00000000

08001e50 <ProcessPedometer>:

void ProcessPedometer()
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	static uint8_t step_flag = 0;
	static uint16_t step_count = 0;

	if (step_flag == 0)
 8001e54:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <ProcessPedometer+0x80>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d11d      	bne.n	8001e98 <ProcessPedometer+0x48>
	{
		if (acc_total < 0.96)
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <ProcessPedometer+0x84>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fae9 	bl	8000438 <__aeabi_f2d>
 8001e66:	a318      	add	r3, pc, #96	; (adr r3, 8001ec8 <ProcessPedometer+0x78>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fdae 	bl	80009cc <__aeabi_dcmplt>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d010      	beq.n	8001e98 <ProcessPedometer+0x48>
		{
			step_flag = 1;
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <ProcessPedometer+0x80>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
			step_count++;
 8001e7c:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <ProcessPedometer+0x88>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <ProcessPedometer+0x88>)
 8001e86:	801a      	strh	r2, [r3, #0]
			MAX7219_Display(step_count);
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <ProcessPedometer+0x88>)
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fd31 	bl	80018f4 <MAX7219_Display>
			Delay_ms(250);
 8001e92:	20fa      	movs	r0, #250	; 0xfa
 8001e94:	f7ff fc76 	bl	8001784 <Delay_ms>
		}
	}
	if (step_flag == 1)
 8001e98:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <ProcessPedometer+0x80>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d110      	bne.n	8001ec2 <ProcessPedometer+0x72>
	{
		if (acc_total > 1)
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <ProcessPedometer+0x84>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fe89 	bl	8000bc0 <__aeabi_fcmpgt>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d100      	bne.n	8001eb6 <ProcessPedometer+0x66>
		{
			step_flag = 0;
			Delay_ms(250);
		}
	}
}
 8001eb4:	e005      	b.n	8001ec2 <ProcessPedometer+0x72>
			step_flag = 0;
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <ProcessPedometer+0x80>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
			Delay_ms(250);
 8001ebc:	20fa      	movs	r0, #250	; 0xfa
 8001ebe:	f7ff fc61 	bl	8001784 <Delay_ms>
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	eb851eb8 	.word	0xeb851eb8
 8001ecc:	3feeb851 	.word	0x3feeb851
 8001ed0:	200000bc 	.word	0x200000bc
 8001ed4:	200000b8 	.word	0x200000b8
 8001ed8:	200000be 	.word	0x200000be

08001edc <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <HardFault_Handler+0x4>

08001eee <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <MemManage_Handler+0x4>

08001ef4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <BusFault_Handler+0x4>

08001efa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <UsageFault_Handler+0x4>

08001f00 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <SystemInit+0x5c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <SystemInit+0x5c>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <SystemInit+0x5c>)
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	4911      	ldr	r1, [pc, #68]	; (8001f80 <SystemInit+0x5c>)
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <SystemInit+0x60>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <SystemInit+0x5c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <SystemInit+0x5c>)
 8001f46:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <SystemInit+0x5c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <SystemInit+0x5c>)
 8001f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <SystemInit+0x5c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <SystemInit+0x5c>)
 8001f62:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001f66:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <SystemInit+0x5c>)
 8001f6a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f6e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001f70:	f000 f87e 	bl	8002070 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <SystemInit+0x64>)
 8001f76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f7a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	f8ff0000 	.word	0xf8ff0000
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001f9e:	4b2f      	ldr	r3, [pc, #188]	; (800205c <SystemCoreClockUpdate+0xd0>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d011      	beq.n	8001fd2 <SystemCoreClockUpdate+0x46>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d83a      	bhi.n	800202a <SystemCoreClockUpdate+0x9e>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <SystemCoreClockUpdate+0x36>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d004      	beq.n	8001fca <SystemCoreClockUpdate+0x3e>
 8001fc0:	e033      	b.n	800202a <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8001fc2:	4b27      	ldr	r3, [pc, #156]	; (8002060 <SystemCoreClockUpdate+0xd4>)
 8001fc4:	4a27      	ldr	r2, [pc, #156]	; (8002064 <SystemCoreClockUpdate+0xd8>)
 8001fc6:	601a      	str	r2, [r3, #0]
      break;
 8001fc8:	e033      	b.n	8002032 <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <SystemCoreClockUpdate+0xd4>)
 8001fcc:	4a25      	ldr	r2, [pc, #148]	; (8002064 <SystemCoreClockUpdate+0xd8>)
 8001fce:	601a      	str	r2, [r3, #0]
      break;
 8001fd0:	e02f      	b.n	8002032 <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <SystemCoreClockUpdate+0xd0>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001fda:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <SystemCoreClockUpdate+0xd0>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe4:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	0c9b      	lsrs	r3, r3, #18
 8001fea:	3302      	adds	r3, #2
 8001fec:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d106      	bne.n	8002002 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <SystemCoreClockUpdate+0xdc>)
 8001ff8:	fb02 f303 	mul.w	r3, r2, r3
 8001ffc:	4a18      	ldr	r2, [pc, #96]	; (8002060 <SystemCoreClockUpdate+0xd4>)
 8001ffe:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8002000:	e017      	b.n	8002032 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <SystemCoreClockUpdate+0xd0>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d006      	beq.n	800201c <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	4a15      	ldr	r2, [pc, #84]	; (8002068 <SystemCoreClockUpdate+0xdc>)
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <SystemCoreClockUpdate+0xd4>)
 8002018:	6013      	str	r3, [r2, #0]
      break;
 800201a:	e00a      	b.n	8002032 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4a11      	ldr	r2, [pc, #68]	; (8002064 <SystemCoreClockUpdate+0xd8>)
 8002020:	fb02 f303 	mul.w	r3, r2, r3
 8002024:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <SystemCoreClockUpdate+0xd4>)
 8002026:	6013      	str	r3, [r2, #0]
      break;
 8002028:	e003      	b.n	8002032 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <SystemCoreClockUpdate+0xd4>)
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <SystemCoreClockUpdate+0xd8>)
 800202e:	601a      	str	r2, [r3, #0]
      break;
 8002030:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <SystemCoreClockUpdate+0xd0>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	4a0b      	ldr	r2, [pc, #44]	; (800206c <SystemCoreClockUpdate+0xe0>)
 800203e:	5cd3      	ldrb	r3, [r2, r3]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <SystemCoreClockUpdate+0xd4>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	fa22 f303 	lsr.w	r3, r2, r3
 800204e:	4a04      	ldr	r2, [pc, #16]	; (8002060 <SystemCoreClockUpdate+0xd4>)
 8002050:	6013      	str	r3, [r2, #0]
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	40021000 	.word	0x40021000
 8002060:	20000014 	.word	0x20000014
 8002064:	007a1200 	.word	0x007a1200
 8002068:	003d0900 	.word	0x003d0900
 800206c:	20000018 	.word	0x20000018

08002070 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002074:	f000 f802 	bl	800207c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}

0800207c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	2300      	movs	r3, #0
 8002088:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800208a:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <SetSysClockTo72+0xf8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a39      	ldr	r2, [pc, #228]	; (8002174 <SetSysClockTo72+0xf8>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002096:	4b37      	ldr	r3, [pc, #220]	; (8002174 <SetSysClockTo72+0xf8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3301      	adds	r3, #1
 80020a4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d103      	bne.n	80020b4 <SetSysClockTo72+0x38>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80020b2:	d1f0      	bne.n	8002096 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80020b4:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <SetSysClockTo72+0xf8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80020c0:	2301      	movs	r3, #1
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	e001      	b.n	80020ca <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80020c6:	2300      	movs	r3, #0
 80020c8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d14b      	bne.n	8002168 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80020d0:	4b29      	ldr	r3, [pc, #164]	; (8002178 <SetSysClockTo72+0xfc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a28      	ldr	r2, [pc, #160]	; (8002178 <SetSysClockTo72+0xfc>)
 80020d6:	f043 0310 	orr.w	r3, r3, #16
 80020da:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80020dc:	4b26      	ldr	r3, [pc, #152]	; (8002178 <SetSysClockTo72+0xfc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a25      	ldr	r2, [pc, #148]	; (8002178 <SetSysClockTo72+0xfc>)
 80020e2:	f023 0303 	bic.w	r3, r3, #3
 80020e6:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80020e8:	4b23      	ldr	r3, [pc, #140]	; (8002178 <SetSysClockTo72+0xfc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a22      	ldr	r2, [pc, #136]	; (8002178 <SetSysClockTo72+0xfc>)
 80020ee:	f043 0302 	orr.w	r3, r3, #2
 80020f2:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <SetSysClockTo72+0xf8>)
 80020f6:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <SetSysClockTo72+0xf8>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80020fc:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <SetSysClockTo72+0xf8>)
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <SetSysClockTo72+0xf8>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <SetSysClockTo72+0xf8>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a1a      	ldr	r2, [pc, #104]	; (8002174 <SetSysClockTo72+0xf8>)
 800210a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800210e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <SetSysClockTo72+0xf8>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a17      	ldr	r2, [pc, #92]	; (8002174 <SetSysClockTo72+0xf8>)
 8002116:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800211a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <SetSysClockTo72+0xf8>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a14      	ldr	r2, [pc, #80]	; (8002174 <SetSysClockTo72+0xf8>)
 8002122:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002126:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <SetSysClockTo72+0xf8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a11      	ldr	r2, [pc, #68]	; (8002174 <SetSysClockTo72+0xf8>)
 800212e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002132:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002134:	bf00      	nop
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <SetSysClockTo72+0xf8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f9      	beq.n	8002136 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <SetSysClockTo72+0xf8>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <SetSysClockTo72+0xf8>)
 8002148:	f023 0303 	bic.w	r3, r3, #3
 800214c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <SetSysClockTo72+0xf8>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4a08      	ldr	r2, [pc, #32]	; (8002174 <SetSysClockTo72+0xf8>)
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800215a:	bf00      	nop
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <SetSysClockTo72+0xf8>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b08      	cmp	r3, #8
 8002166:	d1f9      	bne.n	800215c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	40022000 	.word	0x40022000

0800217c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800217e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002180:	f7ff fed0 	bl	8001f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002184:	480c      	ldr	r0, [pc, #48]	; (80021b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002186:	490d      	ldr	r1, [pc, #52]	; (80021bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <LoopForever+0xe>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800219c:	4c0a      	ldr	r4, [pc, #40]	; (80021c8 <LoopForever+0x16>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021aa:	f000 f817 	bl	80021dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ae:	f7ff faa9 	bl	8001704 <main>

080021b2 <LoopForever>:

LoopForever:
    b LoopForever
 80021b2:	e7fe      	b.n	80021b2 <LoopForever>
  ldr   r0, =_estack
 80021b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80021c0:	08003088 	.word	0x08003088
  ldr r2, =_sbss
 80021c4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80021c8:	200000c0 	.word	0x200000c0

080021cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC1_2_IRQHandler>
	...

080021d0 <__errno>:
 80021d0:	4b01      	ldr	r3, [pc, #4]	; (80021d8 <__errno+0x8>)
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000028 	.word	0x20000028

080021dc <__libc_init_array>:
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	2600      	movs	r6, #0
 80021e0:	4d0c      	ldr	r5, [pc, #48]	; (8002214 <__libc_init_array+0x38>)
 80021e2:	4c0d      	ldr	r4, [pc, #52]	; (8002218 <__libc_init_array+0x3c>)
 80021e4:	1b64      	subs	r4, r4, r5
 80021e6:	10a4      	asrs	r4, r4, #2
 80021e8:	42a6      	cmp	r6, r4
 80021ea:	d109      	bne.n	8002200 <__libc_init_array+0x24>
 80021ec:	f000 ff22 	bl	8003034 <_init>
 80021f0:	2600      	movs	r6, #0
 80021f2:	4d0a      	ldr	r5, [pc, #40]	; (800221c <__libc_init_array+0x40>)
 80021f4:	4c0a      	ldr	r4, [pc, #40]	; (8002220 <__libc_init_array+0x44>)
 80021f6:	1b64      	subs	r4, r4, r5
 80021f8:	10a4      	asrs	r4, r4, #2
 80021fa:	42a6      	cmp	r6, r4
 80021fc:	d105      	bne.n	800220a <__libc_init_array+0x2e>
 80021fe:	bd70      	pop	{r4, r5, r6, pc}
 8002200:	f855 3b04 	ldr.w	r3, [r5], #4
 8002204:	4798      	blx	r3
 8002206:	3601      	adds	r6, #1
 8002208:	e7ee      	b.n	80021e8 <__libc_init_array+0xc>
 800220a:	f855 3b04 	ldr.w	r3, [r5], #4
 800220e:	4798      	blx	r3
 8002210:	3601      	adds	r6, #1
 8002212:	e7f2      	b.n	80021fa <__libc_init_array+0x1e>
 8002214:	08003080 	.word	0x08003080
 8002218:	08003080 	.word	0x08003080
 800221c:	08003080 	.word	0x08003080
 8002220:	08003084 	.word	0x08003084

08002224 <pow>:
 8002224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002228:	4614      	mov	r4, r2
 800222a:	461d      	mov	r5, r3
 800222c:	4680      	mov	r8, r0
 800222e:	4689      	mov	r9, r1
 8002230:	f000 f886 	bl	8002340 <__ieee754_pow>
 8002234:	4622      	mov	r2, r4
 8002236:	4606      	mov	r6, r0
 8002238:	460f      	mov	r7, r1
 800223a:	462b      	mov	r3, r5
 800223c:	4620      	mov	r0, r4
 800223e:	4629      	mov	r1, r5
 8002240:	f7fe fbec 	bl	8000a1c <__aeabi_dcmpun>
 8002244:	bbc8      	cbnz	r0, 80022ba <pow+0x96>
 8002246:	2200      	movs	r2, #0
 8002248:	2300      	movs	r3, #0
 800224a:	4640      	mov	r0, r8
 800224c:	4649      	mov	r1, r9
 800224e:	f7fe fbb3 	bl	80009b8 <__aeabi_dcmpeq>
 8002252:	b1b8      	cbz	r0, 8002284 <pow+0x60>
 8002254:	2200      	movs	r2, #0
 8002256:	2300      	movs	r3, #0
 8002258:	4620      	mov	r0, r4
 800225a:	4629      	mov	r1, r5
 800225c:	f7fe fbac 	bl	80009b8 <__aeabi_dcmpeq>
 8002260:	2800      	cmp	r0, #0
 8002262:	d141      	bne.n	80022e8 <pow+0xc4>
 8002264:	4620      	mov	r0, r4
 8002266:	4629      	mov	r1, r5
 8002268:	f000 fe5f 	bl	8002f2a <finite>
 800226c:	b328      	cbz	r0, 80022ba <pow+0x96>
 800226e:	2200      	movs	r2, #0
 8002270:	2300      	movs	r3, #0
 8002272:	4620      	mov	r0, r4
 8002274:	4629      	mov	r1, r5
 8002276:	f7fe fba9 	bl	80009cc <__aeabi_dcmplt>
 800227a:	b1f0      	cbz	r0, 80022ba <pow+0x96>
 800227c:	f7ff ffa8 	bl	80021d0 <__errno>
 8002280:	2322      	movs	r3, #34	; 0x22
 8002282:	e019      	b.n	80022b8 <pow+0x94>
 8002284:	4630      	mov	r0, r6
 8002286:	4639      	mov	r1, r7
 8002288:	f000 fe4f 	bl	8002f2a <finite>
 800228c:	b9c8      	cbnz	r0, 80022c2 <pow+0x9e>
 800228e:	4640      	mov	r0, r8
 8002290:	4649      	mov	r1, r9
 8002292:	f000 fe4a 	bl	8002f2a <finite>
 8002296:	b1a0      	cbz	r0, 80022c2 <pow+0x9e>
 8002298:	4620      	mov	r0, r4
 800229a:	4629      	mov	r1, r5
 800229c:	f000 fe45 	bl	8002f2a <finite>
 80022a0:	b178      	cbz	r0, 80022c2 <pow+0x9e>
 80022a2:	4632      	mov	r2, r6
 80022a4:	463b      	mov	r3, r7
 80022a6:	4630      	mov	r0, r6
 80022a8:	4639      	mov	r1, r7
 80022aa:	f7fe fbb7 	bl	8000a1c <__aeabi_dcmpun>
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d0e4      	beq.n	800227c <pow+0x58>
 80022b2:	f7ff ff8d 	bl	80021d0 <__errno>
 80022b6:	2321      	movs	r3, #33	; 0x21
 80022b8:	6003      	str	r3, [r0, #0]
 80022ba:	4630      	mov	r0, r6
 80022bc:	4639      	mov	r1, r7
 80022be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022c2:	2200      	movs	r2, #0
 80022c4:	2300      	movs	r3, #0
 80022c6:	4630      	mov	r0, r6
 80022c8:	4639      	mov	r1, r7
 80022ca:	f7fe fb75 	bl	80009b8 <__aeabi_dcmpeq>
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d0f3      	beq.n	80022ba <pow+0x96>
 80022d2:	4640      	mov	r0, r8
 80022d4:	4649      	mov	r1, r9
 80022d6:	f000 fe28 	bl	8002f2a <finite>
 80022da:	2800      	cmp	r0, #0
 80022dc:	d0ed      	beq.n	80022ba <pow+0x96>
 80022de:	4620      	mov	r0, r4
 80022e0:	4629      	mov	r1, r5
 80022e2:	f000 fe22 	bl	8002f2a <finite>
 80022e6:	e7c8      	b.n	800227a <pow+0x56>
 80022e8:	2600      	movs	r6, #0
 80022ea:	4f01      	ldr	r7, [pc, #4]	; (80022f0 <pow+0xcc>)
 80022ec:	e7e5      	b.n	80022ba <pow+0x96>
 80022ee:	bf00      	nop
 80022f0:	3ff00000 	.word	0x3ff00000

080022f4 <sqrt>:
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	4606      	mov	r6, r0
 80022f8:	460f      	mov	r7, r1
 80022fa:	f000 fd37 	bl	8002d6c <__ieee754_sqrt>
 80022fe:	4632      	mov	r2, r6
 8002300:	4604      	mov	r4, r0
 8002302:	460d      	mov	r5, r1
 8002304:	463b      	mov	r3, r7
 8002306:	4630      	mov	r0, r6
 8002308:	4639      	mov	r1, r7
 800230a:	f7fe fb87 	bl	8000a1c <__aeabi_dcmpun>
 800230e:	b990      	cbnz	r0, 8002336 <sqrt+0x42>
 8002310:	2200      	movs	r2, #0
 8002312:	2300      	movs	r3, #0
 8002314:	4630      	mov	r0, r6
 8002316:	4639      	mov	r1, r7
 8002318:	f7fe fb58 	bl	80009cc <__aeabi_dcmplt>
 800231c:	b158      	cbz	r0, 8002336 <sqrt+0x42>
 800231e:	f7ff ff57 	bl	80021d0 <__errno>
 8002322:	2321      	movs	r3, #33	; 0x21
 8002324:	2200      	movs	r2, #0
 8002326:	6003      	str	r3, [r0, #0]
 8002328:	2300      	movs	r3, #0
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7fe fa05 	bl	800073c <__aeabi_ddiv>
 8002332:	4604      	mov	r4, r0
 8002334:	460d      	mov	r5, r1
 8002336:	4620      	mov	r0, r4
 8002338:	4629      	mov	r1, r5
 800233a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800233c:	0000      	movs	r0, r0
	...

08002340 <__ieee754_pow>:
 8002340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002344:	b093      	sub	sp, #76	; 0x4c
 8002346:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800234a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800234e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8002352:	4689      	mov	r9, r1
 8002354:	ea56 0102 	orrs.w	r1, r6, r2
 8002358:	4680      	mov	r8, r0
 800235a:	d111      	bne.n	8002380 <__ieee754_pow+0x40>
 800235c:	1803      	adds	r3, r0, r0
 800235e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8002362:	4152      	adcs	r2, r2
 8002364:	4299      	cmp	r1, r3
 8002366:	4b82      	ldr	r3, [pc, #520]	; (8002570 <__ieee754_pow+0x230>)
 8002368:	4193      	sbcs	r3, r2
 800236a:	f080 84b9 	bcs.w	8002ce0 <__ieee754_pow+0x9a0>
 800236e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002372:	4640      	mov	r0, r8
 8002374:	4649      	mov	r1, r9
 8002376:	f7fd ff01 	bl	800017c <__adddf3>
 800237a:	4683      	mov	fp, r0
 800237c:	468c      	mov	ip, r1
 800237e:	e06f      	b.n	8002460 <__ieee754_pow+0x120>
 8002380:	4b7c      	ldr	r3, [pc, #496]	; (8002574 <__ieee754_pow+0x234>)
 8002382:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8002386:	429c      	cmp	r4, r3
 8002388:	464d      	mov	r5, r9
 800238a:	4682      	mov	sl, r0
 800238c:	dc06      	bgt.n	800239c <__ieee754_pow+0x5c>
 800238e:	d101      	bne.n	8002394 <__ieee754_pow+0x54>
 8002390:	2800      	cmp	r0, #0
 8002392:	d1ec      	bne.n	800236e <__ieee754_pow+0x2e>
 8002394:	429e      	cmp	r6, r3
 8002396:	dc01      	bgt.n	800239c <__ieee754_pow+0x5c>
 8002398:	d10f      	bne.n	80023ba <__ieee754_pow+0x7a>
 800239a:	b172      	cbz	r2, 80023ba <__ieee754_pow+0x7a>
 800239c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80023a0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80023a4:	ea55 050a 	orrs.w	r5, r5, sl
 80023a8:	d1e1      	bne.n	800236e <__ieee754_pow+0x2e>
 80023aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80023ae:	18db      	adds	r3, r3, r3
 80023b0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80023b4:	4152      	adcs	r2, r2
 80023b6:	429d      	cmp	r5, r3
 80023b8:	e7d5      	b.n	8002366 <__ieee754_pow+0x26>
 80023ba:	2d00      	cmp	r5, #0
 80023bc:	da39      	bge.n	8002432 <__ieee754_pow+0xf2>
 80023be:	4b6e      	ldr	r3, [pc, #440]	; (8002578 <__ieee754_pow+0x238>)
 80023c0:	429e      	cmp	r6, r3
 80023c2:	dc52      	bgt.n	800246a <__ieee754_pow+0x12a>
 80023c4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80023c8:	429e      	cmp	r6, r3
 80023ca:	f340 849c 	ble.w	8002d06 <__ieee754_pow+0x9c6>
 80023ce:	1533      	asrs	r3, r6, #20
 80023d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80023d4:	2b14      	cmp	r3, #20
 80023d6:	dd0f      	ble.n	80023f8 <__ieee754_pow+0xb8>
 80023d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80023dc:	fa22 f103 	lsr.w	r1, r2, r3
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	4293      	cmp	r3, r2
 80023e6:	f040 848e 	bne.w	8002d06 <__ieee754_pow+0x9c6>
 80023ea:	f001 0101 	and.w	r1, r1, #1
 80023ee:	f1c1 0302 	rsb	r3, r1, #2
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	b182      	cbz	r2, 8002418 <__ieee754_pow+0xd8>
 80023f6:	e05d      	b.n	80024b4 <__ieee754_pow+0x174>
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d159      	bne.n	80024b0 <__ieee754_pow+0x170>
 80023fc:	f1c3 0314 	rsb	r3, r3, #20
 8002400:	fa46 f103 	asr.w	r1, r6, r3
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	42b3      	cmp	r3, r6
 800240a:	f040 8479 	bne.w	8002d00 <__ieee754_pow+0x9c0>
 800240e:	f001 0101 	and.w	r1, r1, #1
 8002412:	f1c1 0302 	rsb	r3, r1, #2
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	4b58      	ldr	r3, [pc, #352]	; (800257c <__ieee754_pow+0x23c>)
 800241a:	429e      	cmp	r6, r3
 800241c:	d132      	bne.n	8002484 <__ieee754_pow+0x144>
 800241e:	2f00      	cmp	r7, #0
 8002420:	f280 846a 	bge.w	8002cf8 <__ieee754_pow+0x9b8>
 8002424:	4642      	mov	r2, r8
 8002426:	464b      	mov	r3, r9
 8002428:	2000      	movs	r0, #0
 800242a:	4954      	ldr	r1, [pc, #336]	; (800257c <__ieee754_pow+0x23c>)
 800242c:	f7fe f986 	bl	800073c <__aeabi_ddiv>
 8002430:	e7a3      	b.n	800237a <__ieee754_pow+0x3a>
 8002432:	2300      	movs	r3, #0
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	2a00      	cmp	r2, #0
 8002438:	d13c      	bne.n	80024b4 <__ieee754_pow+0x174>
 800243a:	4b4e      	ldr	r3, [pc, #312]	; (8002574 <__ieee754_pow+0x234>)
 800243c:	429e      	cmp	r6, r3
 800243e:	d1eb      	bne.n	8002418 <__ieee754_pow+0xd8>
 8002440:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002444:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002448:	ea53 030a 	orrs.w	r3, r3, sl
 800244c:	f000 8448 	beq.w	8002ce0 <__ieee754_pow+0x9a0>
 8002450:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <__ieee754_pow+0x240>)
 8002452:	429c      	cmp	r4, r3
 8002454:	dd0b      	ble.n	800246e <__ieee754_pow+0x12e>
 8002456:	2f00      	cmp	r7, #0
 8002458:	f2c0 8448 	blt.w	8002cec <__ieee754_pow+0x9ac>
 800245c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8002460:	4658      	mov	r0, fp
 8002462:	4661      	mov	r1, ip
 8002464:	b013      	add	sp, #76	; 0x4c
 8002466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800246a:	2302      	movs	r3, #2
 800246c:	e7e2      	b.n	8002434 <__ieee754_pow+0xf4>
 800246e:	2f00      	cmp	r7, #0
 8002470:	f04f 0b00 	mov.w	fp, #0
 8002474:	f04f 0c00 	mov.w	ip, #0
 8002478:	daf2      	bge.n	8002460 <__ieee754_pow+0x120>
 800247a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800247e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8002482:	e7ed      	b.n	8002460 <__ieee754_pow+0x120>
 8002484:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8002488:	d106      	bne.n	8002498 <__ieee754_pow+0x158>
 800248a:	4642      	mov	r2, r8
 800248c:	464b      	mov	r3, r9
 800248e:	4640      	mov	r0, r8
 8002490:	4649      	mov	r1, r9
 8002492:	f7fe f829 	bl	80004e8 <__aeabi_dmul>
 8002496:	e770      	b.n	800237a <__ieee754_pow+0x3a>
 8002498:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <__ieee754_pow+0x244>)
 800249a:	429f      	cmp	r7, r3
 800249c:	d10a      	bne.n	80024b4 <__ieee754_pow+0x174>
 800249e:	2d00      	cmp	r5, #0
 80024a0:	db08      	blt.n	80024b4 <__ieee754_pow+0x174>
 80024a2:	4640      	mov	r0, r8
 80024a4:	4649      	mov	r1, r9
 80024a6:	b013      	add	sp, #76	; 0x4c
 80024a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024ac:	f000 bc5e 	b.w	8002d6c <__ieee754_sqrt>
 80024b0:	2300      	movs	r3, #0
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	4640      	mov	r0, r8
 80024b6:	4649      	mov	r1, r9
 80024b8:	f000 fd34 	bl	8002f24 <fabs>
 80024bc:	4683      	mov	fp, r0
 80024be:	468c      	mov	ip, r1
 80024c0:	f1ba 0f00 	cmp.w	sl, #0
 80024c4:	d128      	bne.n	8002518 <__ieee754_pow+0x1d8>
 80024c6:	b124      	cbz	r4, 80024d2 <__ieee754_pow+0x192>
 80024c8:	4b2c      	ldr	r3, [pc, #176]	; (800257c <__ieee754_pow+0x23c>)
 80024ca:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d122      	bne.n	8002518 <__ieee754_pow+0x1d8>
 80024d2:	2f00      	cmp	r7, #0
 80024d4:	da07      	bge.n	80024e6 <__ieee754_pow+0x1a6>
 80024d6:	465a      	mov	r2, fp
 80024d8:	4663      	mov	r3, ip
 80024da:	2000      	movs	r0, #0
 80024dc:	4927      	ldr	r1, [pc, #156]	; (800257c <__ieee754_pow+0x23c>)
 80024de:	f7fe f92d 	bl	800073c <__aeabi_ddiv>
 80024e2:	4683      	mov	fp, r0
 80024e4:	468c      	mov	ip, r1
 80024e6:	2d00      	cmp	r5, #0
 80024e8:	daba      	bge.n	8002460 <__ieee754_pow+0x120>
 80024ea:	9b00      	ldr	r3, [sp, #0]
 80024ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80024f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80024f4:	4323      	orrs	r3, r4
 80024f6:	d108      	bne.n	800250a <__ieee754_pow+0x1ca>
 80024f8:	465a      	mov	r2, fp
 80024fa:	4663      	mov	r3, ip
 80024fc:	4658      	mov	r0, fp
 80024fe:	4661      	mov	r1, ip
 8002500:	f7fd fe3a 	bl	8000178 <__aeabi_dsub>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	e790      	b.n	800242c <__ieee754_pow+0xec>
 800250a:	9b00      	ldr	r3, [sp, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d1a7      	bne.n	8002460 <__ieee754_pow+0x120>
 8002510:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8002514:	469c      	mov	ip, r3
 8002516:	e7a3      	b.n	8002460 <__ieee754_pow+0x120>
 8002518:	0feb      	lsrs	r3, r5, #31
 800251a:	3b01      	subs	r3, #1
 800251c:	930c      	str	r3, [sp, #48]	; 0x30
 800251e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002520:	9b00      	ldr	r3, [sp, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	d104      	bne.n	8002530 <__ieee754_pow+0x1f0>
 8002526:	4642      	mov	r2, r8
 8002528:	464b      	mov	r3, r9
 800252a:	4640      	mov	r0, r8
 800252c:	4649      	mov	r1, r9
 800252e:	e7e7      	b.n	8002500 <__ieee754_pow+0x1c0>
 8002530:	4b15      	ldr	r3, [pc, #84]	; (8002588 <__ieee754_pow+0x248>)
 8002532:	429e      	cmp	r6, r3
 8002534:	f340 80f6 	ble.w	8002724 <__ieee754_pow+0x3e4>
 8002538:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800253c:	429e      	cmp	r6, r3
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <__ieee754_pow+0x240>)
 8002540:	dd09      	ble.n	8002556 <__ieee754_pow+0x216>
 8002542:	429c      	cmp	r4, r3
 8002544:	dc0c      	bgt.n	8002560 <__ieee754_pow+0x220>
 8002546:	2f00      	cmp	r7, #0
 8002548:	da0c      	bge.n	8002564 <__ieee754_pow+0x224>
 800254a:	2000      	movs	r0, #0
 800254c:	b013      	add	sp, #76	; 0x4c
 800254e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002552:	f000 bce2 	b.w	8002f1a <__math_oflow>
 8002556:	429c      	cmp	r4, r3
 8002558:	dbf5      	blt.n	8002546 <__ieee754_pow+0x206>
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <__ieee754_pow+0x23c>)
 800255c:	429c      	cmp	r4, r3
 800255e:	dd15      	ble.n	800258c <__ieee754_pow+0x24c>
 8002560:	2f00      	cmp	r7, #0
 8002562:	dcf2      	bgt.n	800254a <__ieee754_pow+0x20a>
 8002564:	2000      	movs	r0, #0
 8002566:	b013      	add	sp, #76	; 0x4c
 8002568:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800256c:	f000 bcd0 	b.w	8002f10 <__math_uflow>
 8002570:	fff00000 	.word	0xfff00000
 8002574:	7ff00000 	.word	0x7ff00000
 8002578:	433fffff 	.word	0x433fffff
 800257c:	3ff00000 	.word	0x3ff00000
 8002580:	3fefffff 	.word	0x3fefffff
 8002584:	3fe00000 	.word	0x3fe00000
 8002588:	41e00000 	.word	0x41e00000
 800258c:	4661      	mov	r1, ip
 800258e:	2200      	movs	r2, #0
 8002590:	4658      	mov	r0, fp
 8002592:	4b5f      	ldr	r3, [pc, #380]	; (8002710 <__ieee754_pow+0x3d0>)
 8002594:	f7fd fdf0 	bl	8000178 <__aeabi_dsub>
 8002598:	a355      	add	r3, pc, #340	; (adr r3, 80026f0 <__ieee754_pow+0x3b0>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	4604      	mov	r4, r0
 80025a0:	460d      	mov	r5, r1
 80025a2:	f7fd ffa1 	bl	80004e8 <__aeabi_dmul>
 80025a6:	a354      	add	r3, pc, #336	; (adr r3, 80026f8 <__ieee754_pow+0x3b8>)
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	4606      	mov	r6, r0
 80025ae:	460f      	mov	r7, r1
 80025b0:	4620      	mov	r0, r4
 80025b2:	4629      	mov	r1, r5
 80025b4:	f7fd ff98 	bl	80004e8 <__aeabi_dmul>
 80025b8:	2200      	movs	r2, #0
 80025ba:	4682      	mov	sl, r0
 80025bc:	468b      	mov	fp, r1
 80025be:	4620      	mov	r0, r4
 80025c0:	4629      	mov	r1, r5
 80025c2:	4b54      	ldr	r3, [pc, #336]	; (8002714 <__ieee754_pow+0x3d4>)
 80025c4:	f7fd ff90 	bl	80004e8 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	a14c      	add	r1, pc, #304	; (adr r1, 8002700 <__ieee754_pow+0x3c0>)
 80025ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025d2:	f7fd fdd1 	bl	8000178 <__aeabi_dsub>
 80025d6:	4622      	mov	r2, r4
 80025d8:	462b      	mov	r3, r5
 80025da:	f7fd ff85 	bl	80004e8 <__aeabi_dmul>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	2000      	movs	r0, #0
 80025e4:	494c      	ldr	r1, [pc, #304]	; (8002718 <__ieee754_pow+0x3d8>)
 80025e6:	f7fd fdc7 	bl	8000178 <__aeabi_dsub>
 80025ea:	4622      	mov	r2, r4
 80025ec:	462b      	mov	r3, r5
 80025ee:	4680      	mov	r8, r0
 80025f0:	4689      	mov	r9, r1
 80025f2:	4620      	mov	r0, r4
 80025f4:	4629      	mov	r1, r5
 80025f6:	f7fd ff77 	bl	80004e8 <__aeabi_dmul>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4640      	mov	r0, r8
 8002600:	4649      	mov	r1, r9
 8002602:	f7fd ff71 	bl	80004e8 <__aeabi_dmul>
 8002606:	a340      	add	r3, pc, #256	; (adr r3, 8002708 <__ieee754_pow+0x3c8>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f7fd ff6c 	bl	80004e8 <__aeabi_dmul>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4650      	mov	r0, sl
 8002616:	4659      	mov	r1, fp
 8002618:	f7fd fdae 	bl	8000178 <__aeabi_dsub>
 800261c:	f04f 0a00 	mov.w	sl, #0
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4604      	mov	r4, r0
 8002626:	460d      	mov	r5, r1
 8002628:	4630      	mov	r0, r6
 800262a:	4639      	mov	r1, r7
 800262c:	f7fd fda6 	bl	800017c <__adddf3>
 8002630:	4632      	mov	r2, r6
 8002632:	463b      	mov	r3, r7
 8002634:	4650      	mov	r0, sl
 8002636:	468b      	mov	fp, r1
 8002638:	f7fd fd9e 	bl	8000178 <__aeabi_dsub>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4620      	mov	r0, r4
 8002642:	4629      	mov	r1, r5
 8002644:	f7fd fd98 	bl	8000178 <__aeabi_dsub>
 8002648:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800264c:	9b00      	ldr	r3, [sp, #0]
 800264e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002650:	3b01      	subs	r3, #1
 8002652:	4313      	orrs	r3, r2
 8002654:	f04f 0600 	mov.w	r6, #0
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	bf0c      	ite	eq
 800265e:	4b2f      	ldreq	r3, [pc, #188]	; (800271c <__ieee754_pow+0x3dc>)
 8002660:	4b2b      	ldrne	r3, [pc, #172]	; (8002710 <__ieee754_pow+0x3d0>)
 8002662:	4604      	mov	r4, r0
 8002664:	460d      	mov	r5, r1
 8002666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800266a:	e9cd 2300 	strd	r2, r3, [sp]
 800266e:	4632      	mov	r2, r6
 8002670:	463b      	mov	r3, r7
 8002672:	f7fd fd81 	bl	8000178 <__aeabi_dsub>
 8002676:	4652      	mov	r2, sl
 8002678:	465b      	mov	r3, fp
 800267a:	f7fd ff35 	bl	80004e8 <__aeabi_dmul>
 800267e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002682:	4680      	mov	r8, r0
 8002684:	4689      	mov	r9, r1
 8002686:	4620      	mov	r0, r4
 8002688:	4629      	mov	r1, r5
 800268a:	f7fd ff2d 	bl	80004e8 <__aeabi_dmul>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4640      	mov	r0, r8
 8002694:	4649      	mov	r1, r9
 8002696:	f7fd fd71 	bl	800017c <__adddf3>
 800269a:	4632      	mov	r2, r6
 800269c:	463b      	mov	r3, r7
 800269e:	4680      	mov	r8, r0
 80026a0:	4689      	mov	r9, r1
 80026a2:	4650      	mov	r0, sl
 80026a4:	4659      	mov	r1, fp
 80026a6:	f7fd ff1f 	bl	80004e8 <__aeabi_dmul>
 80026aa:	4604      	mov	r4, r0
 80026ac:	460d      	mov	r5, r1
 80026ae:	460b      	mov	r3, r1
 80026b0:	4602      	mov	r2, r0
 80026b2:	4649      	mov	r1, r9
 80026b4:	4640      	mov	r0, r8
 80026b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80026ba:	f7fd fd5f 	bl	800017c <__adddf3>
 80026be:	4b18      	ldr	r3, [pc, #96]	; (8002720 <__ieee754_pow+0x3e0>)
 80026c0:	4682      	mov	sl, r0
 80026c2:	4299      	cmp	r1, r3
 80026c4:	460f      	mov	r7, r1
 80026c6:	460e      	mov	r6, r1
 80026c8:	f340 82e5 	ble.w	8002c96 <__ieee754_pow+0x956>
 80026cc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80026d0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80026d4:	4303      	orrs	r3, r0
 80026d6:	f000 81df 	beq.w	8002a98 <__ieee754_pow+0x758>
 80026da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80026de:	2200      	movs	r2, #0
 80026e0:	2300      	movs	r3, #0
 80026e2:	f7fe f973 	bl	80009cc <__aeabi_dcmplt>
 80026e6:	3800      	subs	r0, #0
 80026e8:	bf18      	it	ne
 80026ea:	2001      	movne	r0, #1
 80026ec:	e72e      	b.n	800254c <__ieee754_pow+0x20c>
 80026ee:	bf00      	nop
 80026f0:	60000000 	.word	0x60000000
 80026f4:	3ff71547 	.word	0x3ff71547
 80026f8:	f85ddf44 	.word	0xf85ddf44
 80026fc:	3e54ae0b 	.word	0x3e54ae0b
 8002700:	55555555 	.word	0x55555555
 8002704:	3fd55555 	.word	0x3fd55555
 8002708:	652b82fe 	.word	0x652b82fe
 800270c:	3ff71547 	.word	0x3ff71547
 8002710:	3ff00000 	.word	0x3ff00000
 8002714:	3fd00000 	.word	0x3fd00000
 8002718:	3fe00000 	.word	0x3fe00000
 800271c:	bff00000 	.word	0xbff00000
 8002720:	408fffff 	.word	0x408fffff
 8002724:	4bd2      	ldr	r3, [pc, #840]	; (8002a70 <__ieee754_pow+0x730>)
 8002726:	2200      	movs	r2, #0
 8002728:	402b      	ands	r3, r5
 800272a:	b943      	cbnz	r3, 800273e <__ieee754_pow+0x3fe>
 800272c:	4658      	mov	r0, fp
 800272e:	4661      	mov	r1, ip
 8002730:	4bd0      	ldr	r3, [pc, #832]	; (8002a74 <__ieee754_pow+0x734>)
 8002732:	f7fd fed9 	bl	80004e8 <__aeabi_dmul>
 8002736:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800273a:	4683      	mov	fp, r0
 800273c:	460c      	mov	r4, r1
 800273e:	1523      	asrs	r3, r4, #20
 8002740:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002744:	4413      	add	r3, r2
 8002746:	930b      	str	r3, [sp, #44]	; 0x2c
 8002748:	4bcb      	ldr	r3, [pc, #812]	; (8002a78 <__ieee754_pow+0x738>)
 800274a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800274e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002752:	429c      	cmp	r4, r3
 8002754:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002758:	dd08      	ble.n	800276c <__ieee754_pow+0x42c>
 800275a:	4bc8      	ldr	r3, [pc, #800]	; (8002a7c <__ieee754_pow+0x73c>)
 800275c:	429c      	cmp	r4, r3
 800275e:	f340 8199 	ble.w	8002a94 <__ieee754_pow+0x754>
 8002762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002764:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002768:	3301      	adds	r3, #1
 800276a:	930b      	str	r3, [sp, #44]	; 0x2c
 800276c:	2600      	movs	r6, #0
 800276e:	00f3      	lsls	r3, r6, #3
 8002770:	930d      	str	r3, [sp, #52]	; 0x34
 8002772:	4bc3      	ldr	r3, [pc, #780]	; (8002a80 <__ieee754_pow+0x740>)
 8002774:	4658      	mov	r0, fp
 8002776:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800277a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800277e:	4629      	mov	r1, r5
 8002780:	461a      	mov	r2, r3
 8002782:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8002786:	4623      	mov	r3, r4
 8002788:	f7fd fcf6 	bl	8000178 <__aeabi_dsub>
 800278c:	46da      	mov	sl, fp
 800278e:	462b      	mov	r3, r5
 8002790:	4652      	mov	r2, sl
 8002792:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002796:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800279a:	f7fd fcef 	bl	800017c <__adddf3>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	2000      	movs	r0, #0
 80027a4:	49b7      	ldr	r1, [pc, #732]	; (8002a84 <__ieee754_pow+0x744>)
 80027a6:	f7fd ffc9 	bl	800073c <__aeabi_ddiv>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80027b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80027b6:	f7fd fe97 	bl	80004e8 <__aeabi_dmul>
 80027ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80027be:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80027c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80027c6:	2300      	movs	r3, #0
 80027c8:	2200      	movs	r2, #0
 80027ca:	46ab      	mov	fp, r5
 80027cc:	106d      	asrs	r5, r5, #1
 80027ce:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80027d2:	9304      	str	r3, [sp, #16]
 80027d4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80027d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80027dc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80027e0:	4640      	mov	r0, r8
 80027e2:	4649      	mov	r1, r9
 80027e4:	4614      	mov	r4, r2
 80027e6:	461d      	mov	r5, r3
 80027e8:	f7fd fe7e 	bl	80004e8 <__aeabi_dmul>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80027f4:	f7fd fcc0 	bl	8000178 <__aeabi_dsub>
 80027f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80027fc:	4606      	mov	r6, r0
 80027fe:	460f      	mov	r7, r1
 8002800:	4620      	mov	r0, r4
 8002802:	4629      	mov	r1, r5
 8002804:	f7fd fcb8 	bl	8000178 <__aeabi_dsub>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4650      	mov	r0, sl
 800280e:	4659      	mov	r1, fp
 8002810:	f7fd fcb2 	bl	8000178 <__aeabi_dsub>
 8002814:	4642      	mov	r2, r8
 8002816:	464b      	mov	r3, r9
 8002818:	f7fd fe66 	bl	80004e8 <__aeabi_dmul>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4630      	mov	r0, r6
 8002822:	4639      	mov	r1, r7
 8002824:	f7fd fca8 	bl	8000178 <__aeabi_dsub>
 8002828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800282c:	f7fd fe5c 	bl	80004e8 <__aeabi_dmul>
 8002830:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002834:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	f7fd fe54 	bl	80004e8 <__aeabi_dmul>
 8002840:	a379      	add	r3, pc, #484	; (adr r3, 8002a28 <__ieee754_pow+0x6e8>)
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	4604      	mov	r4, r0
 8002848:	460d      	mov	r5, r1
 800284a:	f7fd fe4d 	bl	80004e8 <__aeabi_dmul>
 800284e:	a378      	add	r3, pc, #480	; (adr r3, 8002a30 <__ieee754_pow+0x6f0>)
 8002850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002854:	f7fd fc92 	bl	800017c <__adddf3>
 8002858:	4622      	mov	r2, r4
 800285a:	462b      	mov	r3, r5
 800285c:	f7fd fe44 	bl	80004e8 <__aeabi_dmul>
 8002860:	a375      	add	r3, pc, #468	; (adr r3, 8002a38 <__ieee754_pow+0x6f8>)
 8002862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002866:	f7fd fc89 	bl	800017c <__adddf3>
 800286a:	4622      	mov	r2, r4
 800286c:	462b      	mov	r3, r5
 800286e:	f7fd fe3b 	bl	80004e8 <__aeabi_dmul>
 8002872:	a373      	add	r3, pc, #460	; (adr r3, 8002a40 <__ieee754_pow+0x700>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f7fd fc80 	bl	800017c <__adddf3>
 800287c:	4622      	mov	r2, r4
 800287e:	462b      	mov	r3, r5
 8002880:	f7fd fe32 	bl	80004e8 <__aeabi_dmul>
 8002884:	a370      	add	r3, pc, #448	; (adr r3, 8002a48 <__ieee754_pow+0x708>)
 8002886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288a:	f7fd fc77 	bl	800017c <__adddf3>
 800288e:	4622      	mov	r2, r4
 8002890:	462b      	mov	r3, r5
 8002892:	f7fd fe29 	bl	80004e8 <__aeabi_dmul>
 8002896:	a36e      	add	r3, pc, #440	; (adr r3, 8002a50 <__ieee754_pow+0x710>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f7fd fc6e 	bl	800017c <__adddf3>
 80028a0:	4622      	mov	r2, r4
 80028a2:	4606      	mov	r6, r0
 80028a4:	460f      	mov	r7, r1
 80028a6:	462b      	mov	r3, r5
 80028a8:	4620      	mov	r0, r4
 80028aa:	4629      	mov	r1, r5
 80028ac:	f7fd fe1c 	bl	80004e8 <__aeabi_dmul>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4630      	mov	r0, r6
 80028b6:	4639      	mov	r1, r7
 80028b8:	f7fd fe16 	bl	80004e8 <__aeabi_dmul>
 80028bc:	4604      	mov	r4, r0
 80028be:	460d      	mov	r5, r1
 80028c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80028c4:	4642      	mov	r2, r8
 80028c6:	464b      	mov	r3, r9
 80028c8:	f7fd fc58 	bl	800017c <__adddf3>
 80028cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80028d0:	f7fd fe0a 	bl	80004e8 <__aeabi_dmul>
 80028d4:	4622      	mov	r2, r4
 80028d6:	462b      	mov	r3, r5
 80028d8:	f7fd fc50 	bl	800017c <__adddf3>
 80028dc:	4642      	mov	r2, r8
 80028de:	4606      	mov	r6, r0
 80028e0:	460f      	mov	r7, r1
 80028e2:	464b      	mov	r3, r9
 80028e4:	4640      	mov	r0, r8
 80028e6:	4649      	mov	r1, r9
 80028e8:	f7fd fdfe 	bl	80004e8 <__aeabi_dmul>
 80028ec:	2200      	movs	r2, #0
 80028ee:	4b66      	ldr	r3, [pc, #408]	; (8002a88 <__ieee754_pow+0x748>)
 80028f0:	4682      	mov	sl, r0
 80028f2:	468b      	mov	fp, r1
 80028f4:	f7fd fc42 	bl	800017c <__adddf3>
 80028f8:	4632      	mov	r2, r6
 80028fa:	463b      	mov	r3, r7
 80028fc:	f7fd fc3e 	bl	800017c <__adddf3>
 8002900:	2400      	movs	r4, #0
 8002902:	460d      	mov	r5, r1
 8002904:	4622      	mov	r2, r4
 8002906:	460b      	mov	r3, r1
 8002908:	4640      	mov	r0, r8
 800290a:	4649      	mov	r1, r9
 800290c:	f7fd fdec 	bl	80004e8 <__aeabi_dmul>
 8002910:	2200      	movs	r2, #0
 8002912:	4680      	mov	r8, r0
 8002914:	4689      	mov	r9, r1
 8002916:	4620      	mov	r0, r4
 8002918:	4629      	mov	r1, r5
 800291a:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <__ieee754_pow+0x748>)
 800291c:	f7fd fc2c 	bl	8000178 <__aeabi_dsub>
 8002920:	4652      	mov	r2, sl
 8002922:	465b      	mov	r3, fp
 8002924:	f7fd fc28 	bl	8000178 <__aeabi_dsub>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4630      	mov	r0, r6
 800292e:	4639      	mov	r1, r7
 8002930:	f7fd fc22 	bl	8000178 <__aeabi_dsub>
 8002934:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002938:	f7fd fdd6 	bl	80004e8 <__aeabi_dmul>
 800293c:	4622      	mov	r2, r4
 800293e:	4606      	mov	r6, r0
 8002940:	460f      	mov	r7, r1
 8002942:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002946:	462b      	mov	r3, r5
 8002948:	f7fd fdce 	bl	80004e8 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4630      	mov	r0, r6
 8002952:	4639      	mov	r1, r7
 8002954:	f7fd fc12 	bl	800017c <__adddf3>
 8002958:	2400      	movs	r4, #0
 800295a:	4606      	mov	r6, r0
 800295c:	460f      	mov	r7, r1
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4640      	mov	r0, r8
 8002964:	4649      	mov	r1, r9
 8002966:	f7fd fc09 	bl	800017c <__adddf3>
 800296a:	a33b      	add	r3, pc, #236	; (adr r3, 8002a58 <__ieee754_pow+0x718>)
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	4620      	mov	r0, r4
 8002972:	460d      	mov	r5, r1
 8002974:	f7fd fdb8 	bl	80004e8 <__aeabi_dmul>
 8002978:	4642      	mov	r2, r8
 800297a:	464b      	mov	r3, r9
 800297c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002980:	4620      	mov	r0, r4
 8002982:	4629      	mov	r1, r5
 8002984:	f7fd fbf8 	bl	8000178 <__aeabi_dsub>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4630      	mov	r0, r6
 800298e:	4639      	mov	r1, r7
 8002990:	f7fd fbf2 	bl	8000178 <__aeabi_dsub>
 8002994:	a332      	add	r3, pc, #200	; (adr r3, 8002a60 <__ieee754_pow+0x720>)
 8002996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299a:	f7fd fda5 	bl	80004e8 <__aeabi_dmul>
 800299e:	a332      	add	r3, pc, #200	; (adr r3, 8002a68 <__ieee754_pow+0x728>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	4606      	mov	r6, r0
 80029a6:	460f      	mov	r7, r1
 80029a8:	4620      	mov	r0, r4
 80029aa:	4629      	mov	r1, r5
 80029ac:	f7fd fd9c 	bl	80004e8 <__aeabi_dmul>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4630      	mov	r0, r6
 80029b6:	4639      	mov	r1, r7
 80029b8:	f7fd fbe0 	bl	800017c <__adddf3>
 80029bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80029be:	4b33      	ldr	r3, [pc, #204]	; (8002a8c <__ieee754_pow+0x74c>)
 80029c0:	f04f 0a00 	mov.w	sl, #0
 80029c4:	4413      	add	r3, r2
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	f7fd fbd7 	bl	800017c <__adddf3>
 80029ce:	4680      	mov	r8, r0
 80029d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80029d2:	4689      	mov	r9, r1
 80029d4:	f7fd fd1e 	bl	8000414 <__aeabi_i2d>
 80029d8:	4604      	mov	r4, r0
 80029da:	460d      	mov	r5, r1
 80029dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80029de:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <__ieee754_pow+0x750>)
 80029e0:	4413      	add	r3, r2
 80029e2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80029e6:	4642      	mov	r2, r8
 80029e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80029ec:	464b      	mov	r3, r9
 80029ee:	f7fd fbc5 	bl	800017c <__adddf3>
 80029f2:	4632      	mov	r2, r6
 80029f4:	463b      	mov	r3, r7
 80029f6:	f7fd fbc1 	bl	800017c <__adddf3>
 80029fa:	4622      	mov	r2, r4
 80029fc:	462b      	mov	r3, r5
 80029fe:	f7fd fbbd 	bl	800017c <__adddf3>
 8002a02:	4622      	mov	r2, r4
 8002a04:	462b      	mov	r3, r5
 8002a06:	4650      	mov	r0, sl
 8002a08:	468b      	mov	fp, r1
 8002a0a:	f7fd fbb5 	bl	8000178 <__aeabi_dsub>
 8002a0e:	4632      	mov	r2, r6
 8002a10:	463b      	mov	r3, r7
 8002a12:	f7fd fbb1 	bl	8000178 <__aeabi_dsub>
 8002a16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002a1a:	f7fd fbad 	bl	8000178 <__aeabi_dsub>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4640      	mov	r0, r8
 8002a24:	4649      	mov	r1, r9
 8002a26:	e60d      	b.n	8002644 <__ieee754_pow+0x304>
 8002a28:	4a454eef 	.word	0x4a454eef
 8002a2c:	3fca7e28 	.word	0x3fca7e28
 8002a30:	93c9db65 	.word	0x93c9db65
 8002a34:	3fcd864a 	.word	0x3fcd864a
 8002a38:	a91d4101 	.word	0xa91d4101
 8002a3c:	3fd17460 	.word	0x3fd17460
 8002a40:	518f264d 	.word	0x518f264d
 8002a44:	3fd55555 	.word	0x3fd55555
 8002a48:	db6fabff 	.word	0xdb6fabff
 8002a4c:	3fdb6db6 	.word	0x3fdb6db6
 8002a50:	33333303 	.word	0x33333303
 8002a54:	3fe33333 	.word	0x3fe33333
 8002a58:	e0000000 	.word	0xe0000000
 8002a5c:	3feec709 	.word	0x3feec709
 8002a60:	dc3a03fd 	.word	0xdc3a03fd
 8002a64:	3feec709 	.word	0x3feec709
 8002a68:	145b01f5 	.word	0x145b01f5
 8002a6c:	be3e2fe0 	.word	0xbe3e2fe0
 8002a70:	7ff00000 	.word	0x7ff00000
 8002a74:	43400000 	.word	0x43400000
 8002a78:	0003988e 	.word	0x0003988e
 8002a7c:	000bb679 	.word	0x000bb679
 8002a80:	08003050 	.word	0x08003050
 8002a84:	3ff00000 	.word	0x3ff00000
 8002a88:	40080000 	.word	0x40080000
 8002a8c:	08003070 	.word	0x08003070
 8002a90:	08003060 	.word	0x08003060
 8002a94:	2601      	movs	r6, #1
 8002a96:	e66a      	b.n	800276e <__ieee754_pow+0x42e>
 8002a98:	a39d      	add	r3, pc, #628	; (adr r3, 8002d10 <__ieee754_pow+0x9d0>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	4640      	mov	r0, r8
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	f7fd fb6b 	bl	800017c <__adddf3>
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002aac:	462b      	mov	r3, r5
 8002aae:	4650      	mov	r0, sl
 8002ab0:	4639      	mov	r1, r7
 8002ab2:	f7fd fb61 	bl	8000178 <__aeabi_dsub>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002abe:	f7fd ffa3 	bl	8000a08 <__aeabi_dcmpgt>
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	f47f ae09 	bne.w	80026da <__ieee754_pow+0x39a>
 8002ac8:	4aa3      	ldr	r2, [pc, #652]	; (8002d58 <__ieee754_pow+0xa18>)
 8002aca:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	f340 8101 	ble.w	8002cd6 <__ieee754_pow+0x996>
 8002ad4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002ad8:	2000      	movs	r0, #0
 8002ada:	151b      	asrs	r3, r3, #20
 8002adc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8002ae0:	fa4a f303 	asr.w	r3, sl, r3
 8002ae4:	4433      	add	r3, r6
 8002ae6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002aea:	4f9c      	ldr	r7, [pc, #624]	; (8002d5c <__ieee754_pow+0xa1c>)
 8002aec:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002af0:	4117      	asrs	r7, r2
 8002af2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8002af6:	ea23 0107 	bic.w	r1, r3, r7
 8002afa:	f1c2 0214 	rsb	r2, r2, #20
 8002afe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8002b02:	460b      	mov	r3, r1
 8002b04:	fa4a fa02 	asr.w	sl, sl, r2
 8002b08:	2e00      	cmp	r6, #0
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	4620      	mov	r0, r4
 8002b10:	bfb8      	it	lt
 8002b12:	f1ca 0a00 	rsblt	sl, sl, #0
 8002b16:	f7fd fb2f 	bl	8000178 <__aeabi_dsub>
 8002b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b22:	2400      	movs	r4, #0
 8002b24:	4642      	mov	r2, r8
 8002b26:	464b      	mov	r3, r9
 8002b28:	f7fd fb28 	bl	800017c <__adddf3>
 8002b2c:	a37a      	add	r3, pc, #488	; (adr r3, 8002d18 <__ieee754_pow+0x9d8>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	4620      	mov	r0, r4
 8002b34:	460d      	mov	r5, r1
 8002b36:	f7fd fcd7 	bl	80004e8 <__aeabi_dmul>
 8002b3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b3e:	4606      	mov	r6, r0
 8002b40:	460f      	mov	r7, r1
 8002b42:	4620      	mov	r0, r4
 8002b44:	4629      	mov	r1, r5
 8002b46:	f7fd fb17 	bl	8000178 <__aeabi_dsub>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4640      	mov	r0, r8
 8002b50:	4649      	mov	r1, r9
 8002b52:	f7fd fb11 	bl	8000178 <__aeabi_dsub>
 8002b56:	a372      	add	r3, pc, #456	; (adr r3, 8002d20 <__ieee754_pow+0x9e0>)
 8002b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5c:	f7fd fcc4 	bl	80004e8 <__aeabi_dmul>
 8002b60:	a371      	add	r3, pc, #452	; (adr r3, 8002d28 <__ieee754_pow+0x9e8>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	4680      	mov	r8, r0
 8002b68:	4689      	mov	r9, r1
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	f7fd fcbb 	bl	80004e8 <__aeabi_dmul>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4640      	mov	r0, r8
 8002b78:	4649      	mov	r1, r9
 8002b7a:	f7fd faff 	bl	800017c <__adddf3>
 8002b7e:	4604      	mov	r4, r0
 8002b80:	460d      	mov	r5, r1
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4630      	mov	r0, r6
 8002b88:	4639      	mov	r1, r7
 8002b8a:	f7fd faf7 	bl	800017c <__adddf3>
 8002b8e:	4632      	mov	r2, r6
 8002b90:	463b      	mov	r3, r7
 8002b92:	4680      	mov	r8, r0
 8002b94:	4689      	mov	r9, r1
 8002b96:	f7fd faef 	bl	8000178 <__aeabi_dsub>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	f7fd fae9 	bl	8000178 <__aeabi_dsub>
 8002ba6:	4642      	mov	r2, r8
 8002ba8:	4606      	mov	r6, r0
 8002baa:	460f      	mov	r7, r1
 8002bac:	464b      	mov	r3, r9
 8002bae:	4640      	mov	r0, r8
 8002bb0:	4649      	mov	r1, r9
 8002bb2:	f7fd fc99 	bl	80004e8 <__aeabi_dmul>
 8002bb6:	a35e      	add	r3, pc, #376	; (adr r3, 8002d30 <__ieee754_pow+0x9f0>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	4604      	mov	r4, r0
 8002bbe:	460d      	mov	r5, r1
 8002bc0:	f7fd fc92 	bl	80004e8 <__aeabi_dmul>
 8002bc4:	a35c      	add	r3, pc, #368	; (adr r3, 8002d38 <__ieee754_pow+0x9f8>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	f7fd fad5 	bl	8000178 <__aeabi_dsub>
 8002bce:	4622      	mov	r2, r4
 8002bd0:	462b      	mov	r3, r5
 8002bd2:	f7fd fc89 	bl	80004e8 <__aeabi_dmul>
 8002bd6:	a35a      	add	r3, pc, #360	; (adr r3, 8002d40 <__ieee754_pow+0xa00>)
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	f7fd face 	bl	800017c <__adddf3>
 8002be0:	4622      	mov	r2, r4
 8002be2:	462b      	mov	r3, r5
 8002be4:	f7fd fc80 	bl	80004e8 <__aeabi_dmul>
 8002be8:	a357      	add	r3, pc, #348	; (adr r3, 8002d48 <__ieee754_pow+0xa08>)
 8002bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bee:	f7fd fac3 	bl	8000178 <__aeabi_dsub>
 8002bf2:	4622      	mov	r2, r4
 8002bf4:	462b      	mov	r3, r5
 8002bf6:	f7fd fc77 	bl	80004e8 <__aeabi_dmul>
 8002bfa:	a355      	add	r3, pc, #340	; (adr r3, 8002d50 <__ieee754_pow+0xa10>)
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	f7fd fabc 	bl	800017c <__adddf3>
 8002c04:	4622      	mov	r2, r4
 8002c06:	462b      	mov	r3, r5
 8002c08:	f7fd fc6e 	bl	80004e8 <__aeabi_dmul>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4640      	mov	r0, r8
 8002c12:	4649      	mov	r1, r9
 8002c14:	f7fd fab0 	bl	8000178 <__aeabi_dsub>
 8002c18:	4604      	mov	r4, r0
 8002c1a:	460d      	mov	r5, r1
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4640      	mov	r0, r8
 8002c22:	4649      	mov	r1, r9
 8002c24:	f7fd fc60 	bl	80004e8 <__aeabi_dmul>
 8002c28:	2200      	movs	r2, #0
 8002c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c32:	4620      	mov	r0, r4
 8002c34:	4629      	mov	r1, r5
 8002c36:	f7fd fa9f 	bl	8000178 <__aeabi_dsub>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c42:	f7fd fd7b 	bl	800073c <__aeabi_ddiv>
 8002c46:	4632      	mov	r2, r6
 8002c48:	4604      	mov	r4, r0
 8002c4a:	460d      	mov	r5, r1
 8002c4c:	463b      	mov	r3, r7
 8002c4e:	4640      	mov	r0, r8
 8002c50:	4649      	mov	r1, r9
 8002c52:	f7fd fc49 	bl	80004e8 <__aeabi_dmul>
 8002c56:	4632      	mov	r2, r6
 8002c58:	463b      	mov	r3, r7
 8002c5a:	f7fd fa8f 	bl	800017c <__adddf3>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4620      	mov	r0, r4
 8002c64:	4629      	mov	r1, r5
 8002c66:	f7fd fa87 	bl	8000178 <__aeabi_dsub>
 8002c6a:	4642      	mov	r2, r8
 8002c6c:	464b      	mov	r3, r9
 8002c6e:	f7fd fa83 	bl	8000178 <__aeabi_dsub>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	2000      	movs	r0, #0
 8002c78:	4939      	ldr	r1, [pc, #228]	; (8002d60 <__ieee754_pow+0xa20>)
 8002c7a:	f7fd fa7d 	bl	8000178 <__aeabi_dsub>
 8002c7e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8002c82:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8002c86:	da29      	bge.n	8002cdc <__ieee754_pow+0x99c>
 8002c88:	4652      	mov	r2, sl
 8002c8a:	f000 f955 	bl	8002f38 <scalbn>
 8002c8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c92:	f7ff bbfe 	b.w	8002492 <__ieee754_pow+0x152>
 8002c96:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <__ieee754_pow+0xa24>)
 8002c98:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8002c9c:	429f      	cmp	r7, r3
 8002c9e:	f77f af13 	ble.w	8002ac8 <__ieee754_pow+0x788>
 8002ca2:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <__ieee754_pow+0xa28>)
 8002ca4:	440b      	add	r3, r1
 8002ca6:	4303      	orrs	r3, r0
 8002ca8:	d009      	beq.n	8002cbe <__ieee754_pow+0x97e>
 8002caa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f7fd fe8b 	bl	80009cc <__aeabi_dcmplt>
 8002cb6:	3800      	subs	r0, #0
 8002cb8:	bf18      	it	ne
 8002cba:	2001      	movne	r0, #1
 8002cbc:	e453      	b.n	8002566 <__ieee754_pow+0x226>
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	f7fd fa59 	bl	8000178 <__aeabi_dsub>
 8002cc6:	4642      	mov	r2, r8
 8002cc8:	464b      	mov	r3, r9
 8002cca:	f7fd fe93 	bl	80009f4 <__aeabi_dcmpge>
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	f43f aefa 	beq.w	8002ac8 <__ieee754_pow+0x788>
 8002cd4:	e7e9      	b.n	8002caa <__ieee754_pow+0x96a>
 8002cd6:	f04f 0a00 	mov.w	sl, #0
 8002cda:	e720      	b.n	8002b1e <__ieee754_pow+0x7de>
 8002cdc:	4621      	mov	r1, r4
 8002cde:	e7d6      	b.n	8002c8e <__ieee754_pow+0x94e>
 8002ce0:	f04f 0b00 	mov.w	fp, #0
 8002ce4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8002d60 <__ieee754_pow+0xa20>
 8002ce8:	f7ff bbba 	b.w	8002460 <__ieee754_pow+0x120>
 8002cec:	f04f 0b00 	mov.w	fp, #0
 8002cf0:	f04f 0c00 	mov.w	ip, #0
 8002cf4:	f7ff bbb4 	b.w	8002460 <__ieee754_pow+0x120>
 8002cf8:	4640      	mov	r0, r8
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	f7ff bb3d 	b.w	800237a <__ieee754_pow+0x3a>
 8002d00:	9200      	str	r2, [sp, #0]
 8002d02:	f7ff bb89 	b.w	8002418 <__ieee754_pow+0xd8>
 8002d06:	2300      	movs	r3, #0
 8002d08:	f7ff bb73 	b.w	80023f2 <__ieee754_pow+0xb2>
 8002d0c:	f3af 8000 	nop.w
 8002d10:	652b82fe 	.word	0x652b82fe
 8002d14:	3c971547 	.word	0x3c971547
 8002d18:	00000000 	.word	0x00000000
 8002d1c:	3fe62e43 	.word	0x3fe62e43
 8002d20:	fefa39ef 	.word	0xfefa39ef
 8002d24:	3fe62e42 	.word	0x3fe62e42
 8002d28:	0ca86c39 	.word	0x0ca86c39
 8002d2c:	be205c61 	.word	0xbe205c61
 8002d30:	72bea4d0 	.word	0x72bea4d0
 8002d34:	3e663769 	.word	0x3e663769
 8002d38:	c5d26bf1 	.word	0xc5d26bf1
 8002d3c:	3ebbbd41 	.word	0x3ebbbd41
 8002d40:	af25de2c 	.word	0xaf25de2c
 8002d44:	3f11566a 	.word	0x3f11566a
 8002d48:	16bebd93 	.word	0x16bebd93
 8002d4c:	3f66c16c 	.word	0x3f66c16c
 8002d50:	5555553e 	.word	0x5555553e
 8002d54:	3fc55555 	.word	0x3fc55555
 8002d58:	3fe00000 	.word	0x3fe00000
 8002d5c:	000fffff 	.word	0x000fffff
 8002d60:	3ff00000 	.word	0x3ff00000
 8002d64:	4090cbff 	.word	0x4090cbff
 8002d68:	3f6f3400 	.word	0x3f6f3400

08002d6c <__ieee754_sqrt>:
 8002d6c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8002ec8 <__ieee754_sqrt+0x15c>
 8002d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d74:	ea3c 0c01 	bics.w	ip, ip, r1
 8002d78:	4606      	mov	r6, r0
 8002d7a:	460d      	mov	r5, r1
 8002d7c:	460c      	mov	r4, r1
 8002d7e:	460a      	mov	r2, r1
 8002d80:	4607      	mov	r7, r0
 8002d82:	4603      	mov	r3, r0
 8002d84:	d10f      	bne.n	8002da6 <__ieee754_sqrt+0x3a>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	f7fd fbad 	bl	80004e8 <__aeabi_dmul>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4630      	mov	r0, r6
 8002d94:	4629      	mov	r1, r5
 8002d96:	f7fd f9f1 	bl	800017c <__adddf3>
 8002d9a:	4606      	mov	r6, r0
 8002d9c:	460d      	mov	r5, r1
 8002d9e:	4630      	mov	r0, r6
 8002da0:	4629      	mov	r1, r5
 8002da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002da6:	2900      	cmp	r1, #0
 8002da8:	dc0e      	bgt.n	8002dc8 <__ieee754_sqrt+0x5c>
 8002daa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8002dae:	ea5c 0707 	orrs.w	r7, ip, r7
 8002db2:	d0f4      	beq.n	8002d9e <__ieee754_sqrt+0x32>
 8002db4:	b141      	cbz	r1, 8002dc8 <__ieee754_sqrt+0x5c>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	f7fd f9dd 	bl	8000178 <__aeabi_dsub>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	f7fd fcbb 	bl	800073c <__aeabi_ddiv>
 8002dc6:	e7e8      	b.n	8002d9a <__ieee754_sqrt+0x2e>
 8002dc8:	1521      	asrs	r1, r4, #20
 8002dca:	d075      	beq.n	8002eb8 <__ieee754_sqrt+0x14c>
 8002dcc:	07cc      	lsls	r4, r1, #31
 8002dce:	f04f 0400 	mov.w	r4, #0
 8002dd2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8002dd6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8002dda:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002dde:	bf5e      	ittt	pl
 8002de0:	0fd9      	lsrpl	r1, r3, #31
 8002de2:	005b      	lslpl	r3, r3, #1
 8002de4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8002de8:	0fd9      	lsrs	r1, r3, #31
 8002dea:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8002dee:	2516      	movs	r5, #22
 8002df0:	4620      	mov	r0, r4
 8002df2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002df6:	107f      	asrs	r7, r7, #1
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	1846      	adds	r6, r0, r1
 8002dfc:	4296      	cmp	r6, r2
 8002dfe:	bfde      	ittt	le
 8002e00:	1b92      	suble	r2, r2, r6
 8002e02:	1870      	addle	r0, r6, r1
 8002e04:	1864      	addle	r4, r4, r1
 8002e06:	0052      	lsls	r2, r2, #1
 8002e08:	3d01      	subs	r5, #1
 8002e0a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8002e0e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002e12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002e16:	d1f0      	bne.n	8002dfa <__ieee754_sqrt+0x8e>
 8002e18:	4629      	mov	r1, r5
 8002e1a:	f04f 0e20 	mov.w	lr, #32
 8002e1e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8002e22:	4282      	cmp	r2, r0
 8002e24:	eb06 0c05 	add.w	ip, r6, r5
 8002e28:	dc02      	bgt.n	8002e30 <__ieee754_sqrt+0xc4>
 8002e2a:	d113      	bne.n	8002e54 <__ieee754_sqrt+0xe8>
 8002e2c:	459c      	cmp	ip, r3
 8002e2e:	d811      	bhi.n	8002e54 <__ieee754_sqrt+0xe8>
 8002e30:	f1bc 0f00 	cmp.w	ip, #0
 8002e34:	eb0c 0506 	add.w	r5, ip, r6
 8002e38:	da43      	bge.n	8002ec2 <__ieee754_sqrt+0x156>
 8002e3a:	2d00      	cmp	r5, #0
 8002e3c:	db41      	blt.n	8002ec2 <__ieee754_sqrt+0x156>
 8002e3e:	f100 0801 	add.w	r8, r0, #1
 8002e42:	1a12      	subs	r2, r2, r0
 8002e44:	4640      	mov	r0, r8
 8002e46:	459c      	cmp	ip, r3
 8002e48:	bf88      	it	hi
 8002e4a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8002e4e:	eba3 030c 	sub.w	r3, r3, ip
 8002e52:	4431      	add	r1, r6
 8002e54:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8002e58:	f1be 0e01 	subs.w	lr, lr, #1
 8002e5c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8002e60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002e64:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8002e68:	d1db      	bne.n	8002e22 <__ieee754_sqrt+0xb6>
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	d006      	beq.n	8002e7c <__ieee754_sqrt+0x110>
 8002e6e:	1c48      	adds	r0, r1, #1
 8002e70:	bf0b      	itete	eq
 8002e72:	4671      	moveq	r1, lr
 8002e74:	3101      	addne	r1, #1
 8002e76:	3401      	addeq	r4, #1
 8002e78:	f021 0101 	bicne.w	r1, r1, #1
 8002e7c:	1063      	asrs	r3, r4, #1
 8002e7e:	0849      	lsrs	r1, r1, #1
 8002e80:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002e84:	07e2      	lsls	r2, r4, #31
 8002e86:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002e8a:	bf48      	it	mi
 8002e8c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8002e90:	460e      	mov	r6, r1
 8002e92:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8002e96:	e782      	b.n	8002d9e <__ieee754_sqrt+0x32>
 8002e98:	0ada      	lsrs	r2, r3, #11
 8002e9a:	3815      	subs	r0, #21
 8002e9c:	055b      	lsls	r3, r3, #21
 8002e9e:	2a00      	cmp	r2, #0
 8002ea0:	d0fa      	beq.n	8002e98 <__ieee754_sqrt+0x12c>
 8002ea2:	02d5      	lsls	r5, r2, #11
 8002ea4:	d50a      	bpl.n	8002ebc <__ieee754_sqrt+0x150>
 8002ea6:	f1c1 0420 	rsb	r4, r1, #32
 8002eaa:	fa23 f404 	lsr.w	r4, r3, r4
 8002eae:	1e4d      	subs	r5, r1, #1
 8002eb0:	408b      	lsls	r3, r1
 8002eb2:	4322      	orrs	r2, r4
 8002eb4:	1b41      	subs	r1, r0, r5
 8002eb6:	e789      	b.n	8002dcc <__ieee754_sqrt+0x60>
 8002eb8:	4608      	mov	r0, r1
 8002eba:	e7f0      	b.n	8002e9e <__ieee754_sqrt+0x132>
 8002ebc:	0052      	lsls	r2, r2, #1
 8002ebe:	3101      	adds	r1, #1
 8002ec0:	e7ef      	b.n	8002ea2 <__ieee754_sqrt+0x136>
 8002ec2:	4680      	mov	r8, r0
 8002ec4:	e7bd      	b.n	8002e42 <__ieee754_sqrt+0xd6>
 8002ec6:	bf00      	nop
 8002ec8:	7ff00000 	.word	0x7ff00000

08002ecc <with_errno>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	4604      	mov	r4, r0
 8002ed0:	460d      	mov	r5, r1
 8002ed2:	4616      	mov	r6, r2
 8002ed4:	f7ff f97c 	bl	80021d0 <__errno>
 8002ed8:	4629      	mov	r1, r5
 8002eda:	6006      	str	r6, [r0, #0]
 8002edc:	4620      	mov	r0, r4
 8002ede:	bd70      	pop	{r4, r5, r6, pc}

08002ee0 <xflow>:
 8002ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ee2:	4615      	mov	r5, r2
 8002ee4:	461c      	mov	r4, r3
 8002ee6:	b180      	cbz	r0, 8002f0a <xflow+0x2a>
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002eee:	e9cd 0100 	strd	r0, r1, [sp]
 8002ef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	4621      	mov	r1, r4
 8002efa:	f7fd faf5 	bl	80004e8 <__aeabi_dmul>
 8002efe:	2222      	movs	r2, #34	; 0x22
 8002f00:	b003      	add	sp, #12
 8002f02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f06:	f7ff bfe1 	b.w	8002ecc <with_errno>
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	e7ee      	b.n	8002eee <xflow+0xe>

08002f10 <__math_uflow>:
 8002f10:	2200      	movs	r2, #0
 8002f12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f16:	f7ff bfe3 	b.w	8002ee0 <xflow>

08002f1a <__math_oflow>:
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8002f20:	f7ff bfde 	b.w	8002ee0 <xflow>

08002f24 <fabs>:
 8002f24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002f28:	4770      	bx	lr

08002f2a <finite>:
 8002f2a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8002f2e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8002f32:	0fc0      	lsrs	r0, r0, #31
 8002f34:	4770      	bx	lr
	...

08002f38 <scalbn>:
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8002f3e:	4604      	mov	r4, r0
 8002f40:	460d      	mov	r5, r1
 8002f42:	4617      	mov	r7, r2
 8002f44:	460b      	mov	r3, r1
 8002f46:	b996      	cbnz	r6, 8002f6e <scalbn+0x36>
 8002f48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002f4c:	4303      	orrs	r3, r0
 8002f4e:	d039      	beq.n	8002fc4 <scalbn+0x8c>
 8002f50:	4b33      	ldr	r3, [pc, #204]	; (8003020 <scalbn+0xe8>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	f7fd fac8 	bl	80004e8 <__aeabi_dmul>
 8002f58:	4b32      	ldr	r3, [pc, #200]	; (8003024 <scalbn+0xec>)
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	429f      	cmp	r7, r3
 8002f5e:	460d      	mov	r5, r1
 8002f60:	da0f      	bge.n	8002f82 <scalbn+0x4a>
 8002f62:	a32b      	add	r3, pc, #172	; (adr r3, 8003010 <scalbn+0xd8>)
 8002f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f68:	f7fd fabe 	bl	80004e8 <__aeabi_dmul>
 8002f6c:	e006      	b.n	8002f7c <scalbn+0x44>
 8002f6e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002f72:	4296      	cmp	r6, r2
 8002f74:	d10a      	bne.n	8002f8c <scalbn+0x54>
 8002f76:	4602      	mov	r2, r0
 8002f78:	f7fd f900 	bl	800017c <__adddf3>
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	460d      	mov	r5, r1
 8002f80:	e020      	b.n	8002fc4 <scalbn+0x8c>
 8002f82:	460b      	mov	r3, r1
 8002f84:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8002f88:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8002f8c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8002f90:	19b9      	adds	r1, r7, r6
 8002f92:	4291      	cmp	r1, r2
 8002f94:	dd0e      	ble.n	8002fb4 <scalbn+0x7c>
 8002f96:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8002f9a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8002f9e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8002fa2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8002fa6:	4820      	ldr	r0, [pc, #128]	; (8003028 <scalbn+0xf0>)
 8002fa8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8002fac:	a31a      	add	r3, pc, #104	; (adr r3, 8003018 <scalbn+0xe0>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	e7d9      	b.n	8002f68 <scalbn+0x30>
 8002fb4:	2900      	cmp	r1, #0
 8002fb6:	dd08      	ble.n	8002fca <scalbn+0x92>
 8002fb8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002fbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002fc0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fca:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8002fce:	da12      	bge.n	8002ff6 <scalbn+0xbe>
 8002fd0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002fd4:	429f      	cmp	r7, r3
 8002fd6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8002fda:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8002fde:	dcdc      	bgt.n	8002f9a <scalbn+0x62>
 8002fe0:	a30b      	add	r3, pc, #44	; (adr r3, 8003010 <scalbn+0xd8>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8002fea:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8002fee:	480f      	ldr	r0, [pc, #60]	; (800302c <scalbn+0xf4>)
 8002ff0:	f041 011f 	orr.w	r1, r1, #31
 8002ff4:	e7b8      	b.n	8002f68 <scalbn+0x30>
 8002ff6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002ffa:	3136      	adds	r1, #54	; 0x36
 8002ffc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003000:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003004:	4620      	mov	r0, r4
 8003006:	4629      	mov	r1, r5
 8003008:	2200      	movs	r2, #0
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <scalbn+0xf8>)
 800300c:	e7ac      	b.n	8002f68 <scalbn+0x30>
 800300e:	bf00      	nop
 8003010:	c2f8f359 	.word	0xc2f8f359
 8003014:	01a56e1f 	.word	0x01a56e1f
 8003018:	8800759c 	.word	0x8800759c
 800301c:	7e37e43c 	.word	0x7e37e43c
 8003020:	43500000 	.word	0x43500000
 8003024:	ffff3cb0 	.word	0xffff3cb0
 8003028:	8800759c 	.word	0x8800759c
 800302c:	c2f8f359 	.word	0xc2f8f359
 8003030:	3c900000 	.word	0x3c900000

08003034 <_init>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	bf00      	nop
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr

08003040 <_fini>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr
